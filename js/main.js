(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;var _clipboard=_interopRequireDefault(require("clipboard")),_toast=require("./toast");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var init=function(){var e=new _clipboard.default(".btn.btn--clipboard");e.on("success",function(){(0,_toast.createToast)("Code copied to clipboard",!0)}),e.on("error",function(){(0,_toast.createToast)("Error: Code could not be copied",!1)})};exports.init=init;

},{"./toast":13,"clipboard":25}],2:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;var _clipboard=_interopRequireDefault(require("clipboard")),_toast=require("./toast");function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _createForOfIteratorHelper(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return i=t.done,t},e:function(t){u=!0,a=t},f:function(){try{i||null==r.return||r.return()}finally{if(u)throw a}}}}function _unsupportedIterableToArray(t,e){if(t){if("string"==typeof t)return _arrayLikeToArray(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(t,e):void 0}}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var BASH_SCRIPT_RE=/^ *\$ * /,init=function(){var t,e=_createForOfIteratorHelper(document.querySelectorAll("pre > code.hljs:first-child"));try{for(e.s();!(t=e.n()).done;){t.value.insertAdjacentHTML("beforebegin",'<button class="code-copy__btn code-copy-js" title="Copy to clipboard"></button>')}}catch(t){e.e(t)}finally{e.f()}var r=new _clipboard.default(".code-copy-js",{target:function(t){return t.nextElementSibling},text:function(t){var e=t.nextElementSibling.textContent;return e.length<=255&&e.match(BASH_SCRIPT_RE)?e.replace(BASH_SCRIPT_RE,"").trim():e.trim()}});r.on("success",function(){(0,_toast.createToast)("Code copied to clipboard",!0)}),r.on("error",function(){(0,_toast.createToast)("Error: Code could not be copied",!1)})};exports.init=init;

},{"./toast":13,"clipboard":25}],3:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;var _toast=require("./toast"),init=function(){var e=window.remoteSourceFile;if(e){var t=!1;document.addEventListener("keydown",function(i){!t&&function(e){return(e.ctrlKey||e.metaKey)&&e.altKey&&"KeyB"===e.code}(i)&&((0,_toast.createToast)("Opening editor",!0),t=!0,setTimeout(function(){window.open(e),t=!1},500))})}};exports.init=init;

},{"./toast":13}],4:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;var _colToArray=require("../utils/col-to-array");function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,a){return t&&_defineProperties(e.prototype,t),a&&_defineProperties(e,a),e}var ExpandStateManager=function(){function e(){_classCallCheck(this,e),this.expands={}}return _createClass(e,[{key:"setExpandState",value:function(e,t){e.startsWith("#")&&(this.expands[e]=t,this.updateState())}},{key:"updateState",value:function(){var e=this,t=Object.keys(this.expands).map(function(t){return{key:t,state:e.expands[t]}}).filter(function(e){return!0===e.state});1!==t.length?this.setUrlHash(""):this.setUrlHash(t[0].key)}},{key:"setUrlHash",value:function(e){window.history&&window.history.replaceState&&window.history.replaceState("",document.title,"".concat(window.location.pathname).concat(e))}}]),e}(),hashManager=new ExpandStateManager,reduceToHash=function(e){return e.substr(e.indexOf("#"))},toggleExpand=function(e){var t=e.parentNode,a=e.href||e.dataset.href,n=reduceToHash(a);t.classList.contains("is-active")?(t.classList.remove("is-active"),hashManager.setExpandState(n,!1)):(t.classList.add("is-active"),hashManager.setExpandState(n,!0))};function openAndScrollTo(e){for(var t=e,a=0,n=function(){var e=t.closest(".expandable, .js-tab-content");if(e.classList.contains("expandable")&&e.classList.add("is-active"),e.classList.contains("js-tab-content")){var n=e.closest(".js-tabgroup"),r=e.getAttribute("id");n.dataset.target=r,n.querySelectorAll(".js-tab-input").forEach(function(e){e.checked=e.dataset.target===r}),(0,_colToArray.colToArray)(e.parentNode.children).forEach(function(t){e===t?t.classList.remove("is-hidden"):t.classList.add("is-hidden")})}t=e.parentNode,a++};null===e.offsetParent&&a<4;)n();e&&requestAnimationFrame(function(){var t=e.offsetTop-60,a=e.closest(".expandable");a&&(a.classList.add("is-active"),window.scrollTo(0,t))})}var init=function(){if(window.location.hash)try{var e=document.querySelector(window.location.hash);e&&openAndScrollTo(e)}catch(e){}var t=['a[href*="'.concat(window.location.pathname,'#"]'),'a[href^="#"]:not(.expandable__trigger)'];document.querySelectorAll(t).forEach(function(e){e.addEventListener("click",function(e){try{e.preventDefault();var t=e.target.getAttribute("href");t||(t=e.target.closest("a").getAttribute("href"));var a=t.split("#")[1],n=document.querySelector("#".concat(a));document.location.hash=a,openAndScrollTo(n)}catch(e){}})}),window.addEventListener("keydown",function(e){(e.ctrlKey||e.metaKey)&&"f"===e.key&&document.querySelectorAll(".layout .expandable:not(.is-active) .expandable__trigger").forEach(function(e){return e.click()})}),document.querySelectorAll(".expandable__trigger").forEach(function(e){e.addEventListener("click",function(e){e.preventDefault(),toggleExpand(e.currentTarget)})})};exports.init=init;

},{"../utils/col-to-array":19}],5:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;var _colToArray=require("../utils/col-to-array"),_photoswipe=_interopRequireDefault(require("../vendor/photoswipe")),_photoswipeUi=_interopRequireDefault(require("../vendor/photoswipe-ui"));function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}var body=document.querySelector("body"),dataAction="gallery",gallerySelector="div.gallery",tpl='<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">\n<div class="pswp__bg"></div>\n<div class="pswp__scroll-wrap">\n  <div class="pswp__container">\n    <div class="pswp__item"></div>\n    <div class="pswp__item"></div>\n    <div class="pswp__item"></div>\n  </div>\n  <div class="pswp__ui pswp__ui--hidden">\n    <div class="pswp__top-bar theme--turquoise">\n      <button class="btn btn--primary pswp__button--close" title="Close (Esc)">Close</button>\n    </div>\n    <div class="pswp__caption"></div>\n    <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>\n    <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>\n  </div>\n</div>\n<div>',tplNode=document.createElement("div");tplNode.innerHTML=tpl,tplNode=tplNode.children[0];var createArrowListeners=function(t){var e=document.querySelector(".pswp__button--arrow--left"),n=document.querySelector(".pswp__button--arrow--right");return!(!e||!n)&&(e.addEventListener("click",t.prev),n.addEventListener("click",t.next),!0)},getCaptionByElement=function(t){var e=t.getAttribute("alt");return t.getAttribute("data-caption-md")&&(e=decodeURIComponent(t.getAttribute("data-caption-md"))),e},createItemFromElement=function(t){return{el:t,src:t.getAttribute("src"),w:1600,h:900,title:getCaptionByElement(t)}},revalidateSize=function(t){return function(e,n){var r=new Image;r.onload=function(){n.w=r.width||n.w,n.h=r.height||n.h,t.updateSize(!0)},r.src=n.src}},getThumbsBoundsFn=function(t){return function(){var e=window.pageYOffset||document.documentElement.scrollTop,n=t.target.getBoundingClientRect();return{x:n.left,y:n.top+e,w:n.width}}},addCaptionHTMLFn=function(t,e){return t.title||t.alt?(e.innerHTML=t.title||t.alt,!0):(e.innerHTML="",!1)},addSlideShow=function(t,e){var n=e.map(function(t){return createItemFromElement(t)}),r=e.indexOf(t.currentTarget),i={index:r=r<0?0:r,galleryUID:0,getThumbBoundsFn:getThumbsBoundsFn(t),addCaptionHTMLFn:addCaptionHTMLFn,captionEl:!0};body.appendChild(tplNode);var o=new _photoswipe.default(tplNode,_photoswipeUi.default,n,i);o.init(),o.listen("destroy",function(){return tplNode.remove()}),o.listen("imageLoadComplete",revalidateSize(o)),createArrowListeners(o)},valueOrEmpty=function(t){return t||""},init=function(){var t=document.querySelectorAll(gallerySelector);(0,_colToArray.colToArray)(t).forEach(function(t){var e=(0,_colToArray.colToArray)(t.getElementsByTagName("img")).filter(function(t){return valueOrEmpty(t.getAttribute("data-action")).toLowerCase()===dataAction});e.forEach(function(t){return t.addEventListener("click",function(t){return addSlideShow(t,e)})})})};exports.init=init;

},{"../utils/col-to-array":19,"../vendor/photoswipe":22,"../vendor/photoswipe-ui":21}],6:[function(require,module,exports){
"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function escapeAndTrimString(e){return e.length>20&&(e=e.slice(0,20)+"..."),e.replace(/"/g,'\\"')}function getType(e){return null===e?"null":_typeof(e)}function isObject(e){return!!e&&"object"===_typeof(e)}function getObjectName(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return void 0===e?"":null===e?"null":t&&"object"===_typeof(e)?Array.isArray(e)?"Array":"Object":""}function getValuePreview(e,t,r){return"null"===e||"undefined"===e?e:("string"!==e&&"stringifiable"!==e||(r='"'+escapeAndTrimString(r)+'"'),"function"===e?t.toString().replace(/[\r\n]/g,"").replace(/\{.*\}/,"")+"{…}":r)}function getPreview(e){return isObject(e)?Array.isArray(e)?"Array["+e.length+"]":getObjectName(e):getValuePreview(getType(e),e,e)}function prefix(e){return e.startsWith("json-viewer")?e:e.startsWith("hljs")?e:"json-viewer-".concat(e)}function createElement(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2?arguments[2]:void 0,n=document.createElement(e),o=t.split(" ");return o.length&&o.forEach(function(e){return e&&n.classList.add(prefix(e))}),void 0!==r&&(r instanceof Node?n.appendChild(r):n.appendChild(document.createTextNode(String(r)))),n}Object.defineProperty(exports,"__esModule",{value:!0}),exports.getType=getType,exports.isObject=isObject,exports.getObjectName=getObjectName,exports.getValuePreview=getValuePreview,exports.getPreview=getPreview,exports.prefix=prefix,exports.createElement=createElement;

},{}],7:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;var _jsonViewer=require("./json-viewer"),init=function(){for(var e=document.getElementsByClassName("json-viewer-js"),t=0,r=Array.from(e);t<r.length;t++){var n=r[t],i=n.textContent,o=n.getAttribute("data-open"),s=new _jsonViewer.JSONViewer({json:JSON.parse(i),open:+o});n.appendChild(s.renderRoot())}};exports.init=init;

},{"./json-viewer":8}],8:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.JSONViewer=void 0;var _raf=require("../../utils/raf"),_helpers=require("./helpers");function ownKeys(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),i.push.apply(i,n)}return i}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(i),!0).forEach(function(t){_defineProperty(e,t,i[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):ownKeys(Object(i)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))})}return e}function _defineProperty(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,i){return t&&_defineProperties(e.prototype,t),i&&_defineProperties(e,i),e}var DATE_STRING_REGEX=/(^\d{1,4}[\.|\\/|-]\d{1,2}[\.|\\/|-]\d{1,4})(\s*(?:0?[1-9]:[0-5]|1(?=[012])\d:[0-5])\d\s*[ap]m)?$/,PARTIAL_DATE_REGEX=/\d{2}:\d{2}:\d{2} GMT-\d{4}/,JSON_DATE_REGEX=/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z/,MAX_ANIMATED_TOGGLE_ITEMS=10,defaultConfig={hoverPreviewEnabled:!0,hoverPreviewArrayCount:100,hoverPreviewFieldCount:5,animateOpen:!0,animateClose:!0,useToJSON:!0,sortPropertiesBy:null},JSONViewer=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=t.json,n=t.open,s=void 0===n?1:n,r=t.config,o=t.key;_classCallCheck(this,e),this.json=i,this.open=s,this.key=o,this.config=_objectSpread(_objectSpread({},defaultConfig),r),this._isOpen=null,this.element=void 0,""===this.key&&(this.key='""')}return _createClass(e,[{key:"isOpen",get:function(){return null!==this._isOpen?this._isOpen:this.open>0},set:function(e){this._isOpen=e}},{key:"isDate",get:function(){return this.json instanceof Date||"string"===this.type&&(DATE_STRING_REGEX.test(this.json)||JSON_DATE_REGEX.test(this.json)||PARTIAL_DATE_REGEX.test(this.json))}},{key:"isUrl",get:function(){return"string"===this.type&&0===this.json.indexOf("http")}},{key:"isArray",get:function(){return Array.isArray(this.json)}},{key:"isObject",get:function(){return(0,_helpers.isObject)(this.json)}},{key:"isEmptyObject",get:function(){return!this.keys.length&&!this.isArray}},{key:"isEmpty",get:function(){return this.isEmptyObject||this.keys&&!this.keys.length&&this.isArray}},{key:"useToJSON",get:function(){return this.config.useToJSON&&"stringifiable"===this.type}},{key:"hasKey",get:function(){return void 0!==this.key}},{key:"constructorName",get:function(){return(0,_helpers.getObjectName)(this.json,!1)}},{key:"type",get:function(){return this.config.useToJSON&&this.json&&this.json.toJSON?"stringifiable":(0,_helpers.getType)(this.json)}},{key:"keys",get:function(){if(this.isObject){var e=Object.keys(this.json);return!this.isArray&&this.config.sortPropertiesBy?e.sort(this.config.sortPropertiesBy):e}return[]}},{key:"toggleOpen",value:function(){this.isOpen=!this.isOpen,this.element&&(this.isOpen?this.appendChildren(this.config.animateOpen):this.removeChildren(this.config.animateClose),this.element.classList.toggle((0,_helpers.prefix)("open")))}},{key:"openAtDepth",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;e<0||(this.open=e,this.isOpen=0!==e,this.element&&(this.removeChildren(!1),0===e?this.element.classList.remove((0,_helpers.prefix)("open")):(this.appendChildren(this.config.animateOpen),this.element.classList.add((0,_helpers.prefix)("open")))))}},{key:"getInlinepreview",value:function(){var e=this;if(this.isArray)return this.json.length>this.config.hoverPreviewArrayCount?"Array[".concat(this.json.length,"]"):"[".concat(this.json.map(_helpers.getPreview).join(", "),"]");var t=this.keys,i=t.slice(0,this.config.hoverPreviewFieldCount).map(function(t){return"".concat(t,": ").concat((0,_helpers.getPreview)(e.json[t]))}),n=t.length>=this.config.hoverPreviewFieldCount?"…":"";return"{".concat(i.join(", ")).concat(n,"}")}},{key:"renderRoot",value:function(){return this.render(!0)}},{key:"render",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.element=e?(0,_helpers.createElement)("code","root hljs"):(0,_helpers.createElement)("div","row");var t=this.isObject?(0,_helpers.createElement)("a","toggler-link"):(0,_helpers.createElement)("span");if(this.isObject&&!this.useToJSON&&t.appendChild((0,_helpers.createElement)("span","toggler")),this.hasKey&&t.appendChild((0,_helpers.createElement)("span","key","".concat(this.key,":"))),this.isObject&&!this.useToJSON){var i=(0,_helpers.createElement)("span","value"),n=(0,_helpers.createElement)("span"),s=(0,_helpers.createElement)("span","constructor-name",this.constructorName);if(n.appendChild(s),this.isArray){var r=(0,_helpers.createElement)("span");r.appendChild((0,_helpers.createElement)("span","bracket","[")),r.appendChild((0,_helpers.createElement)("span","number",this.json.length)),r.appendChild((0,_helpers.createElement)("span","bracket","]")),n.appendChild(r)}i.appendChild(n),t.appendChild(i)}else{var o=this.isUrl?(0,_helpers.createElement)("a"):(0,_helpers.createElement)("span");o.classList.add((0,_helpers.prefix)(this.type)),this.isDate&&o.classList.add((0,_helpers.prefix)("date")),this.isUrl&&(o.classList.add((0,_helpers.prefix)("url")),o.setAttribute("href",this.json));var h=(0,_helpers.getValuePreview)(this.type,this.json,this.useToJSON?this.json.toJSON():this.json);o.appendChild(document.createTextNode(h)),t.appendChild(o)}if(this.isObject&&this.config.hoverPreviewEnabled){var a=(0,_helpers.createElement)("span","preview-text");a.appendChild(document.createTextNode(this.getInlinepreview())),t.appendChild(a)}var l=(0,_helpers.createElement)("div","children");return this.isObject&&l.classList.add((0,_helpers.prefix)("object")),this.isArray&&l.classList.add((0,_helpers.prefix)("array")),this.isEmpty&&l.classList.add((0,_helpers.prefix)("empty")),this.isOpen&&this.element.classList.add((0,_helpers.prefix)("open")),e||this.element.appendChild(t),this.element.appendChild(l),this.isObject&&this.isOpen&&this.appendChildren(),this.isObject&&!this.useToJSON&&t.addEventListener("click",this.toggleOpen.bind(this)),this.element}},{key:"appendChildren",value:function(){var t=this,i=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=this.element.querySelector("div.".concat((0,_helpers.prefix)("children")));if(n&&!this.isEmpty)if(i){var s=0;(0,_raf.raf)(function i(){var r=t.keys[s],o=new e({json:t.json[r],open:t.open-1,config:t.config,key:r});n.appendChild(o.render()),(s+=1)<t.keys.length&&(s>MAX_ANIMATED_TOGGLE_ITEMS?i():(0,_raf.raf)(i))})}else this.keys.forEach(function(i){var s=new e({json:t.json[i],open:t.open-1,config:t.config,key:i});n.appendChild(s.render())})}},{key:"removeChildren",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.element.querySelector("div.".concat((0,_helpers.prefix)("children")));if(e){var i=0;(0,_raf.raf)(function e(){t&&t.children.length&&(t.removeChild(t.children[0]),(i+=1)>MAX_ANIMATED_TOGGLE_ITEMS?e():(0,_raf.raf)(e))})}else t&&(t.innerHTML="")}}]),e}();exports.JSONViewer=JSONViewer;

},{"../../utils/raf":20,"./helpers":6}],9:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.scrollToElement=scrollToElement,exports.init=void 0;var _raf=require("../utils/raf"),navEl=document.querySelector("dt-common-navigation"),navHeight=navEl?navEl.getBoundingClientRect().height:0;function scrollToElement(t){var o=(t.offsetTop||t.getBoundingClientRect().top)-navHeight;window.scrollTo(0,o)}function openExpandablesAndTabs(t){for(var o,n=t,e=!1;n!==document;)e||(n.classList.contains("tab__content")&&(o=n.dataset.content),o&&n.classList.contains("js-tabgroup")&&(n.tabgroupControl.setActiveTab(o,!1),e=!0)),n.classList.contains("expandable")&&n.classList.add("is-active"),n=n.parentNode}function openAndScrollTo(t){openExpandablesAndTabs(t),(0,_raf.raf)(function(){scrollToElement(t)})}function handleScrollToWithOffset(t){t.preventDefault();var o=(t.currentTarget||t.target).getAttribute("href");if(o){var n=o.split("#").slice(1).join(""),e=document.querySelector("#".concat(n));e&&(openAndScrollTo(e),window.location.hash=n)}}var init=function(){if(window.location.hash){var t=document.querySelector(window.location.hash);t&&(window.history&&window.history.scrollRestoration&&(window.history.scrollRestoration="manual"),openAndScrollTo(t))}var o=['a[href*="'.concat(window.location.pathname,'#"]'),'a[href^="#"]:not(.expandable__trigger)'];document.querySelectorAll(o).forEach(function(t){t.addEventListener("click",handleScrollToWithOffset)})};exports.init=init;

},{"../utils/raf":20}],10:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;var _clipboard=_interopRequireDefault(require("clipboard")),_raf=require("../utils/raf"),_scrollAnchorIntoView=require("./scroll-anchor-into-view"),_toast=require("./toast");function _interopRequireDefault(r){return r&&r.__esModule?r:{default:r}}var init=function(){var r=new _clipboard.default(".shortlink-copy-js");r.on("success",function(r){(0,_toast.createToast)("Shortlink copied to clipboard",!0);var o=r.text;if(o){var t=o.includes("#")&&o.split("#").pop();if(t){window.history&&window.history.pushState({},null,"#"+t);var e=document.querySelector("#".concat(t));e&&(0,_raf.raf)(function(){return(0,_scrollAnchorIntoView.scrollToElement)(e)})}}}),r.on("error",function(){(0,_toast.createToast)("Error: Shortlink could not be copied",!1)})};exports.init=init;

},{"../utils/raf":20,"./scroll-anchor-into-view":9,"./toast":13,"clipboard":25}],11:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;var _colToArray=require("../utils/col-to-array"),fillData=function(t){var e=t.querySelectorAll("th");e.length||(e=t.querySelectorAll("thead td"));var r=(0,_colToArray.colToArray)(e).map(function(t){return t.textContent});t.querySelectorAll("tr").forEach(function(t){t.querySelectorAll("td").forEach(function(t,e){return t.setAttribute("data-th",r[e])})})},init=function(){document.querySelectorAll("table").forEach(function(t){t.getAttribute("data-initialized")||(t.setAttribute("data-initialized",!0),fillData(t))})};exports.init=init;

},{"../utils/col-to-array":19}],12:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;var _idb=_interopRequireDefault(require("idb")),_colToArray=require("../utils/col-to-array");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _createForOfIteratorHelper(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,u=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return i=e.done,e},e:function(e){u=!0,o=e},f:function(){try{i||null==r.return||r.return()}finally{if(u)throw o}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}var dbp=_idb.default.open("dt-storage",1,function(e){e.createObjectStore("tabpreference")}),preferences={get:function(e){return dbp.then(function(t){return t.transaction("tabpreference").objectStore("tabpreference").get(e)})},set:function(e,t){return dbp.then(function(r){return r.transaction("tabpreference","readwrite").objectStore("tabpreference").put(t,e)})}},TabGroup=function(){function e(t){_classCallCheck(this,e),this.element=t,this.contents=(0,_colToArray.colToArray)(t.querySelectorAll(".js-tab-content")),this.inputs=(0,_colToArray.colToArray)(t.querySelectorAll(".js-tab-input")),this.readPreferences(),this.addClickListeners()}return _createClass(e,[{key:"readPreferences",value:function(){var e=this;preferences.get(this.element.id).then(function(t){if(t&&!e.element.dataset.target){var r=e.inputs.find(function(e){return e.getAttribute("data-target")===t});r&&(e.element.dataset.target=t,e.openTab(r))}}).then(function(){var t=e.element.querySelector("* > .tabs");t&&t.classList.remove("is-hidden")})}},{key:"addClickListeners",value:function(){var e,t=this,r=_createForOfIteratorHelper(this.inputs);try{for(r.s();!(e=r.n()).done;){e.value.addEventListener("click",function(e){e.target&&t.openTab(e.target,!0)})}}catch(e){r.e(e)}finally{r.f()}}},{key:"openTab",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=e.dataset.target,n=this.element.id;if(r){var a,o=_createForOfIteratorHelper(this.contents);try{for(o.s();!(a=o.n()).done;){var i=a.value;i.getAttribute("id")===r?i.classList.remove("is-hidden"):i.classList.add("is-hidden")}}catch(e){o.e(e)}finally{o.f()}var u,c=_createForOfIteratorHelper(this.inputs);try{for(c.s();!(u=c.n()).done;){var l=u.value;l.checked=l===e}}catch(e){c.e(e)}finally{c.f()}t&&(preferences.set(n,r),void 0!==history.pushState&&history.pushState(null,null,"#"+r))}}}]),e}(),init=function(){window.document.querySelectorAll(".js-tabgroup").forEach(function(e){return new TabGroup(e)})};exports.init=init;

},{"../utils/col-to-array":19,"idb":31}],13:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.createToast=void 0;var _raf=require("../utils/raf"),showToast=function(t){t.style.opacity="1"},destroyToast=function(t){t.parentElement.removeChild(t)},createToast=function(t,e,o){var a=document.createElement("div");a.classList.add("toast",e?"toast-success":"toast-fail"),a.innerText=t;var s=(o=o||document.body).appendChild(a);(0,_raf.raf)(function(){showToast(s),setTimeout(function(){return destroyToast(s)},5e3)})};exports.createToast=createToast;

},{"../utils/raf":20}],14:[function(require,module,exports){
"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}function _createClass(e,t,i){return t&&_defineProperties(e.prototype,t),i&&_defineProperties(e,i),e}Object.defineProperty(exports,"__esModule",{value:!0}),exports.TreeItemLink=void 0;var KEYCODES=Object.freeze({RETURN:13,SPACE:32,PAGEUP:33,PAGEDOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40}),TreeItemLink=function(){function e(t,i,s){_classCallCheck(this,e),"object"===_typeof(t)&&(t.tabIndex=-1,this.tree=i,this.groupTreeItem=s,this.domNode=t,this.label=t.textContent.trim(),this.stopDefaultClick=!1,t.getAttribute("aria-label")&&(this.label=t.getAttribute("aria-label").trim()),this.isExpandable=!1,this.isVisible=!1,this.inGroup=!1,s&&(this.inGroup=!0),t.classList.contains("has-children")&&(this.isExpandable=!0),t.getAttribute("aria-expanded")&&(this.isVisible="true"===t.getAttribute("aria-expanded")))}return _createClass(e,[{key:"init",value:function(){this.domNode.tabIndex=-1,this.domNode.getAttribute("role")||this.domNode.setAttribute("role","treeitem"),this.domNode.addEventListener("keydown",this.handleKeydown.bind(this));var e=this.domNode.querySelector(".toc__menu__expand");e&&e.addEventListener("click",this.handleExpand.bind(this))}},{key:"activateLink",value:function(e){var t=e.domNode.querySelector(".toc__menu__entry").querySelector("a");if(t){var i=t.getAttribute("href");window.location.assign(i)}}},{key:"handleKeydown",value:function(e){var t=!1,i=e.key;function s(e){return 1===e.length&&e.match(/\S/)}function r(e){"*"===i?(e.tree.expandAllSiblingItems(e),t=!0):s(i)&&(e.tree.setFocusByFirstCharacter(e,i),t=!0)}if(this.stopDefaultClick=!1,!(e.altKey||e.ctrlKey||e.metaKey)){if(e.shift&&s(i))r(this);else switch(e.keyCode){case KEYCODES.SPACE:case KEYCODES.RETURN:this.activateLink(this),t=!0;break;case KEYCODES.UP:this.tree.setFocusToPreviousItem(this),t=!0;break;case KEYCODES.DOWN:this.tree.setFocusToNextItem(this),t=!0;break;case KEYCODES.RIGHT:this.isExpandable&&(this.isExpanded()?this.tree.setFocusToNextItem(this):this.tree.expandTreeItem(this)),t=!0;break;case KEYCODES.LEFT:this.isExpandable&&this.isExpanded()?(this.tree.collapseTreeItem(this),t=!0):this.inGroup&&(this.tree.setFocusToParentItem(this),t=!0);break;case KEYCODES.HOME:this.tree.setFocusToFirstItem(),t=!0;break;case KEYCODES.END:this.tree.setFocusToLastItem(),t=!0;break;default:s(i)&&r(this)}t&&(e.stopPropagation(),e.preventDefault())}}},{key:"handleExpand",value:function(){this.isExpanded()?this.tree.collapseTreeItem(this,!1):this.tree.expandTreeItem(this)}},{key:"isExpanded",value:function(){return!!this.isExpandable&&"true"===this.domNode.getAttribute("aria-expanded")}}]),e}();exports.TreeItemLink=TreeItemLink;

},{}],15:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.TreeLinks=void 0;var _TreeLinkItem=require("./TreeLinkItem");function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var s=0;s<t.length;s++){var i=t[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,s){return t&&_defineProperties(e.prototype,t),s&&_defineProperties(e,s),e}var TreeLinks=function(){function e(t){_classCallCheck(this,e),"object"===_typeof(t)&&(this.domNode=t,this.treeItems=[],this.firstChars=[],this.firstTreeItem=null,this.lastTreeItem=null)}return _createClass(e,[{key:"init",value:function(){this.domNode.getAttribute("role")||this.domNode.setAttribute("role","tree"),function e(t,s,i){for(var r=t.firstElementChild,o=i;r;){var n="li"===r.tagName.toLowerCase(),a="span"===r.firstElementChild.tagName.toLowerCase();n&&a&&((o=new _TreeLinkItem.TreeItemLink(r,s,i)).init(),s.treeItems.push(o),s.firstChars.push(o.label.slice(0,1).toLowerCase())),r.querySelector(".toc__menu > li:first-child")&&e(r,s,o),r=r.nextElementSibling}}(this.domNode,this,!1),this.updateVisibleTreeitems(),this.firstTreeItem.domNode.tabIndex=0}},{key:"updateVisibleTreeitems",value:function(){this.firstTreeItem=this.treeItems[0];for(var e=0;e<this.treeItems.length;e+=1){var t=this.treeItems[e],s=t.domNode.parentNode;for(t.isVisible=!0;s&&s!==this.domNode;)"false"===s.getAttribute("aria-expanded")&&(t.isVisible=!1),s=s.parentNode;t.isVisible&&(this.lastTreeItem=t)}}},{key:"setFocusToItem",value:function(e){for(var t=0;t<this.treeItems.length;t+=1){var s=this.treeItems[t];s===e?(s.domNode.tabIndex=0,s.domNode.focus()):s.domNode.tabIndex=-1}}},{key:"setFocusToNextItem",value:function(e){for(var t=!1,s=this.treeItems.length-1;s>=0;s-=1){var i=this.treeItems[s];if(i===e)break;i.isVisible&&(t=i)}t&&this.setFocusToItem(t)}},{key:"setFocusToPreviousItem",value:function(e){for(var t=!1,s=0;s<this.treeItems.length;s+=1){var i=this.treeItems[s];if(i===e)break;i.isVisible&&(t=i)}t&&this.setFocusToItem(t)}},{key:"setFocusToParentItem",value:function(e){e.groupTreeItem&&this.setFocusToItem(e.groupTreeItem)}},{key:"setFocusToFirstItem",value:function(){this.setFocusToItem(this.firstTreeItem)}},{key:"setFocusToLastItem",value:function(){this.setFocusToItem(this.lastTreeItem)}},{key:"expandTreeItem",value:function(e){e.isExpandable&&(e.domNode.setAttribute("aria-expanded",!0),this.updateVisibleTreeitems())}},{key:"expandAllSiblingItems",value:function(e){for(var t=0;t<this.treeItems.length;t+=1){var s=this.treeItems[t];s.groupTreeItem===e.groupTreeItem&&s.isExpandable&&this.expandTreeItem(s)}}},{key:"collapseTreeItem",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],s=!1;(s=e.isExpanded()?e:e.groupTreeItem)&&(s.domNode.setAttribute("aria-expanded",!1),this.updateVisibleTreeitems(),t&&this.setFocusToItem(s))}},{key:"setFocusByFirstCharacter",value:function(e,t){var s=t.toLowerCase(),i=this.treeItems.indexOf(e)+1;i===this.treeItems.length&&(i=0);var r=this.getIndexFirstChars(i,s);-1===r&&(r=this.getIndexFirstChars(0,s)),r>-1&&this.setFocusToItem(this.treeItems[r])}},{key:"getIndexFirstChars",value:function(e,t){for(var s=e;s<this.firstChars.length;s+=1)if(this.treeItems[s].isVisible&&t===this.firstChars[s])return s;return-1}}]),e}();exports.TreeLinks=TreeLinks;

},{"./TreeLinkItem":14}],16:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;var _TreeLinks=require("./TreeLinks"),init=function(){for(var e=document.querySelectorAll('[role="tree"]'),i=0;i<e.length;i+=1){new _TreeLinks.TreeLinks(e[i]).init()}};exports.init=init;

},{"./TreeLinks":15}],17:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;var _photoswipe=_interopRequireDefault(require("../vendor/photoswipe")),_photoswipeUi=_interopRequireDefault(require("../vendor/photoswipe-ui"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var pswpTemplate='<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">\n  <div class="pswp__bg"></div>\n  <div class="pswp__scroll-wrap">\n    <div class="pswp__container">\n      <div class="pswp__item"></div>\n      <div class="pswp__item"></div>\n      <div class="pswp__item"></div>\n    </div>\n    <div class="pswp__ui pswp__ui--hidden">\n      <div class="pswp__top-bar">\n        <button class="btn btn--primary pswp__button--close" title="Close (Esc)">Close</button>\n      </div>\n    </div>\n  </div>\n<div>',createPswpElement=function(e){var t=document.createElement("div");t.innerHTML=pswpTemplate;var n=t.children.item(0),i=e.cloneNode();return i.className="img-loading",n.querySelector(".pswp__item").appendChild(i),n},findSourceSet=function(e){var t=e.attr("srcset").split(",");if(t.length){var n=t[t.length-1].split(" ").filter(function(e){return""!==e});if(n.length)return n[0]}return!1},findLargestSource=function(e){var t=e.parentNode,n=t.nodeName.toLowerCase();try{if("a"===n)return t.href;if("picture"===n&&e.currentSrc.includes("webp")){var i=t.querySelector('source[type="image/webp"]');return findSourceSet(i)||e.src}return findSourceSet(e)||e.src}catch(t){return e.src}},getOptions=function(e){return{galleryUID:0,getThumbBoundsFn:function(){var t=window.pageYOffset||document.documentElement.scrollTop,n=e.getBoundingClientRect();return{x:n.left,y:n.top+t,w:n.width}}}},handleLoad=function(e,t,n){return function(){var i=[{el:e,src:n.src,w:n.width,h:n.height}];document.body.appendChild(t);var r=new _photoswipe.default(t,_photoswipeUi.default,i,getOptions(e));r.init(),r.listen("destroy",function(){document.querySelectorAll(".pswp").forEach(function(e){return e.remove()}),document.querySelectorAll(".img-loading").forEach(function(e){return e.classList.remove("img-loading")})})}},handleClick=function(e){e.preventDefault(),e.stopPropagation();var t=createPswpElement(e.target),n=new Image;n.onload=handleLoad(e.target,t,n),n.src=findLargestSource(e.target)},init=function(){document.querySelectorAll('img[data-action="zoom"]').forEach(function(e){e.addEventListener("click",handleClick)})};exports.init=init;

},{"../vendor/photoswipe":22,"../vendor/photoswipe-ui":21}],18:[function(require,module,exports){
"use strict";var _es6Promise=_interopRequireDefault(require("es6-promise"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}require("whatwg-fetch"),window.Promise||(window.Promise=_es6Promise.default),String.prototype.endsWith||(String.prototype.endsWith=function(e,t){return(void 0===t||t>this.length)&&(t=this.length),this.substring(t-e.length,t)===e}),Array.prototype.findIndex||(Array.prototype.findIndex=function(e){if(null==this)throw new TypeError('"this" is null or not defined');var t=Object(this),r=t.length>>>0;if("function"!=typeof e)throw new TypeError("predicate must be a function");for(var i=arguments[1],n=0;n<r;){var o=t[n];if(e.call(i,o,n,t))return n;n++}return-1});

},{"es6-promise":28,"whatwg-fetch":35}],19:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.colToArray=void 0;var colToArray=function(r){return[].slice.call(r)};exports.colToArray=colToArray;

},{}],20:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.raf=void 0;var internal=function(e){return window.setTimeout(e,1e3/60)},raf=function(e){return window.requestAnimationFrame?window.requestAnimationFrame(e):window.webkitRequestAnimationFrame?window.webkitRequestAnimationFrame(e):window.mozRequestAnimationFrame?window.mozRequestAnimationFrame(e):internal(e)};exports.raf=raf;

},{}],21:[function(require,module,exports){
(function (global){(function (){
"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"function"==typeof define&&define.amd?define(t):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=t():e.PhotoSwipeUI_Default=t()}(global,function(){return function(e,t){var o,n,l,i,r,s,a,u,c,d,p,m,f,h,v=this,w=!1,g=!0,_=!0,b={barsSize:{top:0,bottom:"auto"},closeElClasses:["item","caption","zoom-wrap","ui","top-bar"],timeToIdle:4e3,timeToIdleOutside:1e3,loadingIndicatorDelay:1e3,addCaptionHTMLFn:function(e,t){return e.title?(t.children[0].innerHTML=e.title,!0):(t.children[0].innerHTML="",!1)},closeEl:!0,captionEl:!1,fullscreenEl:!1,zoomEl:!0,shareEl:!1,counterEl:!1,arrowEl:!1,preloaderEl:!1,tapToClose:!0,tapToToggleControls:!0,clickToCloseNonZoomable:!0,indexIndicatorSep:" / ",fitControlsWidth:1200},C=function(e){if(m)return!0;e=e||window.event,p.timeToIdle&&p.mouseUsed&&!s&&O();for(var o,n,l=(e.target||e.srcElement).getAttribute("class")||"",i=0;i<M.length;i++)(o=M[i]).onTap&&l.indexOf("pswp__"+o.name)>-1&&(o.onTap(),n=!0);if(n){e.stopPropagation&&e.stopPropagation(),m=!0;var r=t.features.isOldAndroid?600:30;setTimeout(function(){m=!1},r)}},T=function(e,o,n){t[(n?"add":"remove")+"Class"](e,"pswp__"+o)},I=function(){var e=1===p.getNumItemsFn();e!==d&&(T(n,"ui--one-slide",e),d=e)},E=function(){T(void 0,"share-modal--hidden",_)},F=function(){return(_=!_)?(t.removeClass(void 0,"pswp__share-modal--fade-in"),setTimeout(function(){_&&E()},300)):(E(),setTimeout(function(){_||t.addClass(void 0,"pswp__share-modal--fade-in")},30)),_||x(),!1},y=function(t){var o=(t=t||window.event).target||t.srcElement;return e.shout("shareLinkClick",t,o),!(!o.href||!o.hasAttribute("download")&&(window.open(o.href,"pswp_share","scrollbars=yes,resizable=yes,toolbar=no,location=yes,width=550,height=420,top=100,left="+(window.screen?Math.round(screen.width/2-275):100)),_||F(),1))},x=function(){for(var e,t,o,n,l="",i=0;i<p.shareButtons.length;i++)e=p.shareButtons[i],t=p.getImageURLForShare(e),o=p.getPageURLForShare(e),n=p.getTextForShare(e),l+='<a href="'+e.url.replace("{{url}}",encodeURIComponent(o)).replace("{{image_url}}",encodeURIComponent(t)).replace("{{raw_image_url}}",t).replace("{{text}}",encodeURIComponent(n))+'" target="_blank" class="pswp__share--'+e.id+'"'+(e.download?"download":"")+">"+e.label+"</a>",p.parseShareButtonOut&&(l=p.parseShareButtonOut(e,l));(void 0).children[0].innerHTML=l,(void 0).children[0].onclick=y},S=function(e){for(var o=0;o<p.closeElClasses.length;o++)if(t.hasClass(e,"pswp__"+p.closeElClasses[o]))return!0},K=0,O=function(){clearTimeout(h),K=0,s&&v.setIdle(!1)},k=function(e){var t=(e=e||window.event).relatedTarget||e.toElement;t&&"HTML"!==t.nodeName||(clearTimeout(h),h=setTimeout(function(){v.setIdle(!0)},p.timeToIdleOutside))},L=function(e){u!==e&&(T(void 0,"preloader--active",!e),u=e)},z=function(o){var r=o.vGap;if(!e.likelyTouchDevice||p.mouseUsed||screen.width>p.fitControlsWidth){var s=p.barsSize;if(p.captionEl&&"auto"===s.bottom)if(i||((i=t.createEl("pswp__caption pswp__caption--fake")).appendChild(t.createEl("pswp__caption__center")),n.insertBefore(i,l),t.addClass(n,"pswp__ui--fit")),p.addCaptionHTMLFn(o,i,!0)){var a=i.clientHeight;r.bottom=parseInt(a,10)||44}else r.bottom=s.top;else r.bottom="auto"===s.bottom?0:s.bottom;r.top=s.top}else r.top=r.bottom=0},M=[{name:"caption",option:"captionEl",onInit:function(e){l=e}},{name:"button--zoom",option:"zoomEl",onTap:e.toggleDesktopZoom},{name:"button--close",option:"closeEl",onTap:e.close}];v.init=function(){var r;t.extend(e.options,b,!0),p=e.options,n=t.getChildByClass(e.scrollWrap,"pswp__ui"),(a=e.listen)("onVerticalDrag",function(e){g&&e<.95?v.hideControls():!g&&e>=.95&&v.showControls()}),a("onPinchClose",function(e){g&&e<.9?(v.hideControls(),r=!0):r&&!g&&e>.9&&v.showControls()}),a("zoomGestureEnded",function(){(r=!1)&&!g&&v.showControls()}),a("beforeChange",v.update),a("doubleTap",function(t){var o=e.currItem.initialZoomLevel;e.getZoomLevel()!==o?e.zoomTo(o,t,333):e.zoomTo(p.getDoubleTapZoom(!1,e.currItem),t,333)}),a("preventDragEvent",function(e,t,o){var n=e.target||e.srcElement;n&&n.getAttribute("class")&&e.type.indexOf("mouse")>-1&&(n.getAttribute("class").indexOf("__caption")>0||/(SMALL|STRONG|EM)/i.test(n.tagName))&&(o.prevent=!1)}),a("bindEvents",function(){t.bind(n,"pswpTap click",C),t.bind(e.scrollWrap,"pswpTap",v.onGlobalTap),e.likelyTouchDevice||t.bind(e.scrollWrap,"mouseover",v.onMouseOver)}),a("unbindEvents",function(){_||F(),f&&clearInterval(f),t.unbind(document,"mouseout",k),t.unbind(document,"mousemove",O),t.unbind(n,"pswpTap click",C),t.unbind(e.scrollWrap,"pswpTap",v.onGlobalTap),t.unbind(e.scrollWrap,"mouseover",v.onMouseOver),o&&(t.unbind(document,o.eventK,v.updateFullscreen),o.isFullscreen()&&(p.hideAnimationDuration=0,o.exit()),o=null)}),a("destroy",function(){p.captionEl&&(i&&n.removeChild(i),t.removeClass(l,"pswp__caption--empty")),t.removeClass(n,"pswp__ui--over-close"),t.addClass(n,"pswp__ui--hidden"),v.setIdle(!1)}),p.showAnimationDuration||t.removeClass(n,"pswp__ui--hidden"),a("initialZoomIn",function(){p.showAnimationDuration&&t.removeClass(n,"pswp__ui--hidden")}),a("initialZoomOut",function(){t.addClass(n,"pswp__ui--hidden")}),a("parseVerticalMargin",z),function(){var e,o,l,i=function(n){if(n)for(var i=n.length,r=0;r<i;r++){e=n[r],o=e.className;for(var s=0;s<M.length;s++)l=M[s],o.indexOf("pswp__"+l.name)>-1&&(p[l.option]?(t.removeClass(e,"pswp__element--disabled"),l.onInit&&l.onInit(e)):t.addClass(e,"pswp__element--disabled"))}};i(n.children);var r=t.getChildByClass(n,"pswp__top-bar");r&&i(r.children)}(),p.shareEl,I(),p.timeToIdle&&a("mouseUsed",function(){t.bind(document,"mousemove",O),t.bind(document,"mouseout",k),f=setInterval(function(){2==++K&&v.setIdle(!0)},p.timeToIdle/2)}),p.fullscreenEl&&!t.features.isOldAndroid&&(o||(o=v.getFullscreenAPI()),o?(t.bind(document,o.eventK,v.updateFullscreen),v.updateFullscreen(),t.addClass(e.template,"pswp--supports-fs")):t.removeClass(e.template,"pswp--supports-fs")),p.preloaderEl&&(L(!0),a("beforeChange",function(){clearTimeout(c),c=setTimeout(function(){e.currItem&&e.currItem.loading?(!e.allowProgressiveImg()||e.currItem.img&&!e.currItem.img.naturalWidth)&&L(!1):L(!0)},p.loadingIndicatorDelay)}),a("imageLoadComplete",function(t,o){e.currItem===o&&L(!0)}))},v.setIdle=function(e){s=e,T(n,"ui--idle",e)},v.update=function(){g&&e.currItem?(v.updateIndexIndicator(),p.captionEl&&(p.addCaptionHTMLFn(e.currItem,l),T(l,"caption--empty",!e.currItem.title)),w=!0):w=!1,_||F(),I()},v.updateFullscreen=function(n){n&&setTimeout(function(){e.setScrollOffset(0,t.getScrollY())},50),t[(o.isFullscreen()?"add":"remove")+"Class"](e.template,"pswp--fs")},v.updateIndexIndicator=function(){p.counterEl&&((void 0).innerHTML=e.getCurrentIndex()+1+p.indexIndicatorSep+p.getNumItemsFn())},v.onGlobalTap=function(o){var n=(o=o||window.event).target||o.srcElement;if(!m)if(o.detail&&"mouse"===o.detail.pointerType){if(S(n))return void e.close();t.hasClass(n,"pswp__img")&&(1===e.getZoomLevel()&&e.getZoomLevel()<=e.currItem.fitRatio?p.clickToCloseNonZoomable&&e.close():e.toggleDesktopZoom(o.detail.releasePoint))}else if(p.tapToToggleControls&&(g?v.hideControls():v.showControls()),p.tapToClose&&(t.hasClass(n,"pswp__img")||S(n)))return void e.close()},v.onMouseOver=function(e){var t=(e=e||window.event).target||e.srcElement;T(n,"ui--over-close",S(t))},v.hideControls=function(){t.addClass(n,"pswp__ui--hidden"),g=!1},v.showControls=function(){g=!0,w||v.update(),t.removeClass(n,"pswp__ui--hidden")},v.supportsFullscreen=function(){var e=document;return!!(e.exitFullscreen||e.mozCancelFullScreen||e.webkitExitFullscreen||e.msExitFullscreen)},v.getFullscreenAPI=function(){var t,o=document.documentElement,n="fullscreenchange";return o.requestFullscreen?t={enterK:"requestFullscreen",exitK:"exitFullscreen",elementK:"fullscreenElement",eventK:n}:o.mozRequestFullScreen?t={enterK:"mozRequestFullScreen",exitK:"mozCancelFullScreen",elementK:"mozFullScreenElement",eventK:"moz"+n}:o.webkitRequestFullscreen?t={enterK:"webkitRequestFullscreen",exitK:"webkitExitFullscreen",elementK:"webkitFullscreenElement",eventK:"webkit"+n}:o.msRequestFullscreen&&(t={enterK:"msRequestFullscreen",exitK:"msExitFullscreen",elementK:"msFullscreenElement",eventK:"MSFullscreenChange"}),t&&(t.enter=function(){if(r=p.closeOnScroll,p.closeOnScroll=!1,"webkitRequestFullscreen"!==this.enterK)return e.template[this.enterK]();e.template[this.enterK](Element.ALLOW_KEYBOARD_INPUT)},t.exit=function(){return p.closeOnScroll=r,document[this.exitK]()},t.isFullscreen=function(){return document[this.elementK]}),t}}});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],22:[function(require,module,exports){
(function (global){(function (){
"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"function"==typeof define&&define.amd?define(t):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=t():e.PhotoSwipe=t()}(global,function(){return function(e,t,n,i){var o={features:null,bind:function(e,t,n,i){var o=(i?"remove":"add")+"EventListener";t=t.split(" ");for(var a=0;a<t.length;a++)t[a]&&e[o](t[a],n,!1)},isArray:function(e){return e instanceof Array},createEl:function(e,t){var n=document.createElement(t||"div");return e&&(n.className=e),n},getScrollY:function(){var e=window.pageYOffset;return void 0!==e?e:document.documentElement.scrollTop},unbind:function(e,t,n){o.bind(e,t,n,!0)},removeClass:function(e,t){var n=new RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ").replace(/^\s\s*/,"").replace(/\s\s*$/,"")},addClass:function(e,t){o.hasClass(e,t)||(e.className+=(e.className?" ":"")+t)},hasClass:function(e,t){return e.className&&new RegExp("(^|\\s)"+t+"(\\s|$)").test(e.className)},getChildByClass:function(e,t){for(var n=e.firstChild;n;){if(o.hasClass(n,t))return n;n=n.nextSibling}},arraySearch:function(e,t,n){for(var i=e.length;i--;)if(e[i][n]===t)return i;return-1},extend:function(e,t,n){for(var i in t)if(t.hasOwnProperty(i)){if(n&&e.hasOwnProperty(i))continue;e[i]=t[i]}},easing:{sine:{out:function(e){return Math.sin(e*(Math.PI/2))},inOut:function(e){return-(Math.cos(Math.PI*e)-1)/2}},cubic:{out:function(e){return--e*e*e+1}}},detectFeatures:function(){if(o.features)return o.features;var e=o.createEl().style,t="",n={};if(n.oldIE=document.all&&!document.addEventListener,n.touch="ontouchstart"in window,window.requestAnimationFrame&&(n.raf=window.requestAnimationFrame,n.caf=window.cancelAnimationFrame),n.pointerEvent=navigator.pointerEnabled||navigator.msPointerEnabled,!n.pointerEvent){var i=navigator.userAgent;if(/iP(hone|od)/.test(navigator.platform)){var a=navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);a&&a.length>0&&(a=parseInt(a[1],10))>=1&&a<8&&(n.isOldIOSPhone=!0)}var r=i.match(/Android\s([0-9\.]*)/),l=r?r[1]:0;(l=parseFloat(l))>=1&&(l<4.4&&(n.isOldAndroid=!0),n.androidVersion=l),n.isMobileOpera=/opera mini|opera mobi/i.test(i)}for(var s,u,c=["transform","perspective","animationName"],d=["","webkit","Moz","ms","O"],p=0;p<4;p++){t=d[p];for(var m=0;m<3;m++)s=c[m],u=t+(t?s.charAt(0).toUpperCase()+s.slice(1):s),!n[s]&&u in e&&(n[s]=u);t&&!n.raf&&(t=t.toLowerCase(),n.raf=window[t+"RequestAnimationFrame"],n.raf&&(n.caf=window[t+"CancelAnimationFrame"]||window[t+"CancelRequestAnimationFrame"]))}if(!n.raf){var f=0;n.raf=function(e){var t=(new Date).getTime(),n=Math.max(0,16-(t-f)),i=window.setTimeout(function(){e(t+n)},n);return f=t+n,i},n.caf=function(e){clearTimeout(e)}}return n.svg=!!document.createElementNS&&!!document.createElementNS("http://www.w3.org/2000/svg","svg").createSVGRect,o.features=n,n}};o.detectFeatures(),o.features.oldIE&&(o.bind=function(e,t,n,i){t=t.split(" ");for(var o,a=(i?"detach":"attach")+"Event",r=function(){n.handleEvent.call(n)},l=0;l<t.length;l++)if(o=t[l])if("object"===_typeof(n)&&n.handleEvent){if(i){if(!n["oldIE"+o])return!1}else n["oldIE"+o]=r;e[a]("on"+o,n["oldIE"+o])}else e[a]("on"+o,n)});var a=this,r={allowPanToNext:!0,spacing:.12,bgOpacity:1,mouseUsed:!1,loop:!0,pinchToClose:!0,closeOnScroll:!0,closeOnVerticalDrag:!0,verticalDragRange:.75,hideAnimationDuration:333,showAnimationDuration:333,showHideOpacity:!1,focus:!0,escKey:!0,arrowKeys:!0,mainScrollEndFriction:.35,panEndFriction:.35,isClickableElement:function(e){return"A"===e.tagName},getDoubleTapZoom:function(e,t){return e?1:t.initialZoomLevel<.7?1:1.33},maxSpreadZoom:1.33,modal:!0,scaleMode:"fit"};o.extend(r,i);var l,s,u,c,d,p,m,f,y,h,x,v,g,w,b,I,C,D,S,M,T,A,E,O,k,R,Z,P,F,L,_,z,N,U,H,Y,B,W,G,X,V,K,q,$,j,J,Q,ee,te,ne,ie,oe,ae,re,le,se={x:0,y:0},ue={x:0,y:0},ce={x:0,y:0},de={},pe=0,me={},fe={x:0,y:0},ye=0,he=!0,xe=[],ve={},ge=!1,we=function(e,t){o.extend(a,t.publicMethods),xe.push(e)},be=function(e){var t=zt();return e>t-1?e-t:e<0?t+e:e},Ie={},Ce=function(e,t){return Ie[e]||(Ie[e]=[]),Ie[e].push(t)},De=function(e){var t=Ie[e];if(t){var n=Array.prototype.slice.call(arguments);n.shift();for(var i=0;i<t.length;i++)t[i].apply(a,n)}},Se=function(){return(new Date).getTime()},Me=function(e){ae=e,a.bg.style.opacity=e*r.bgOpacity},Te=function(e,t,n,i,o){(!ge||o&&o!==a.currItem)&&(i/=o?o.fitRatio:a.currItem.fitRatio),e[A]=v+t+"px, "+n+"px"+g+" scale("+i+")"},Ae=function(e){ee&&(e&&(h>a.currItem.fitRatio?ge||(Vt(a.currItem,!1,!0),ge=!0):ge&&(Vt(a.currItem),ge=!1)),Te(ee,ce.x,ce.y,h))},Ee=function(e){e.container&&Te(e.container.style,e.initialPosition.x,e.initialPosition.y,e.initialZoomLevel,e)},Oe=function(e,t){t[A]=v+e+"px, 0px"+g},ke=function(e,t){if(!r.loop&&t){var n=c+(fe.x*pe-e)/fe.x,i=Math.round(e-ut.x);(n<0&&i>0||n>=zt()-1&&i<0)&&(e=ut.x+i*r.mainScrollEndFriction)}ut.x=e,Oe(e,d)},Re=function(e,t){var n=ct[e]-me[e];return ue[e]+se[e]+n-n*(t/x)},Ze=function(e,t){e.x=t.x,e.y=t.y,t.id&&(e.id=t.id)},Pe=function(e){e.x=Math.round(e.x),e.y=Math.round(e.y)},Fe=null,Le=function t(){Fe&&(o.unbind(document,"mousemove",t),o.addClass(e,"pswp--has_mouse"),r.mouseUsed=!0,De("mouseUsed")),Fe=setTimeout(function(){Fe=null},100)},_e=function(e,t){var n=Bt(a.currItem,de,e);return t&&(Q=n),n},ze=function(e){return e||(e=a.currItem),e.initialZoomLevel},Ne=function(e){return e||(e=a.currItem),e.w>0?r.maxSpreadZoom:1},Ue=function(e,t,n,i){return i===a.currItem.initialZoomLevel?(n[e]=a.currItem.initialPosition[e],!0):(n[e]=Re(e,i),n[e]>t.min[e]?(n[e]=t.min[e],!0):n[e]<t.max[e]&&(n[e]=t.max[e],!0))},He=function(e){var t="";r.escKey&&27===e.keyCode?t="close":r.arrowKeys&&(37===e.keyCode?t="prev":39===e.keyCode&&(t="next")),t&&(e.ctrlKey||e.altKey||e.shiftKey||e.metaKey||(e.preventDefault?e.preventDefault():e.returnValue=!1,a[t]()))},Ye=function(e){e&&(V||X||te||Y)&&(e.preventDefault(),e.stopPropagation())},Be=function(){a.setScrollOffset(0,o.getScrollY())},We={},Ge=0,Xe=function(e){We[e]&&(We[e].raf&&R(We[e].raf),Ge--,delete We[e])},Ve=function(e){We[e]&&Xe(e),We[e]||(Ge++,We[e]={})},Ke=function(){for(var e in We)We.hasOwnProperty(e)&&Xe(e)},qe=function(e,t,n,i,o,a,r){var l,s=Se();Ve(e),function u(){if(We[e]){if((l=Se()-s)>=i)return Xe(e),a(n),void(r&&r());a((n-t)*o(l/i)+t),We[e].raf=k(u)}}()},$e={shout:De,listen:Ce,viewportSize:de,options:r,isMainScrollAnimating:function(){return te},getZoomLevel:function(){return h},getCurrentIndex:function(){return c},isDragging:function(){return W},isZooming:function(){return j},setScrollOffset:function(e,t){me.x=e,L=me.y=t,De("updateScrollOffset",me)},applyZoomPan:function(e,t,n,i){ce.x=t,ce.y=n,h=e,Ae(i)},init:function(){if(!l&&!s){var n;a.framework=o,a.template=e,a.bg=o.getChildByClass(e,"pswp__bg"),Z=e.className,l=!0,_=o.detectFeatures(),k=_.raf,R=_.caf,A=_.transform,F=_.oldIE,a.scrollWrap=o.getChildByClass(e,"pswp__scroll-wrap"),a.container=o.getChildByClass(a.scrollWrap,"pswp__container"),d=a.container.style,a.itemHolders=I=[{el:a.container.children[0],wrap:0,index:-1},{el:a.container.children[1],wrap:0,index:-1},{el:a.container.children[2],wrap:0,index:-1}],I[0].el.style.display=I[2].el.style.display="none",function(){if(A){var t=_.perspective&&!O;return v="translate"+(t?"3d(":"("),void(g=_.perspective?", 0px)":")")}A="left",o.addClass(e,"pswp--ie"),Oe=function(e,t){t.left=e+"px"},Ee=function(e){var t=e.fitRatio>1?1:e.fitRatio,n=e.container.style,i=t*e.w,o=t*e.h;n.width=i+"px",n.height=o+"px",n.left=e.initialPosition.x+"px",n.top=e.initialPosition.y+"px"},Ae=function(){if(ee){var e=ee,t=a.currItem,n=t.fitRatio>1?1:t.fitRatio,i=n*t.w,o=n*t.h;e.width=i+"px",e.height=o+"px",e.left=ce.x+"px",e.top=ce.y+"px"}}}(),y={resize:a.updateSize,scroll:Be,keydown:He,click:Ye};var i=_.isOldIOSPhone||_.isOldAndroid||_.isMobileOpera;for(_.animationName&&_.transform&&!i||(r.showAnimationDuration=r.hideAnimationDuration=0),n=0;n<xe.length;n++)a["init"+xe[n]]();t&&(a.ui=new t(a,o)).init(),De("firstUpdate"),c=c||r.index||0,(isNaN(c)||c<0||c>=zt())&&(c=0),a.currItem=_t(c),(_.isOldIOSPhone||_.isOldAndroid)&&(he=!1),e.setAttribute("aria-hidden","false"),r.modal&&(he?e.style.position="fixed":(e.style.position="absolute",e.style.top=o.getScrollY()+"px")),void 0===L&&(De("initialLayout"),L=P=o.getScrollY());var u="pswp--open ";for(r.mainClass&&(u+=r.mainClass+" "),r.showHideOpacity&&(u+="pswp--animate_opacity "),u+=O?"pswp--touch":"pswp--notouch",u+=_.animationName?" pswp--css_animation":"",u+=_.svg?" pswp--svg":"",o.addClass(e,u),a.updateSize(),p=-1,ye=null,n=0;n<3;n++)Oe((n+p)*fe.x,I[n].el.style);F||o.bind(a.scrollWrap,f,a),Ce("initialZoomInEnd",function(){a.setContent(I[0],c-1),a.setContent(I[2],c+1),I[0].el.style.display=I[2].el.style.display="block",r.focus&&e.focus(),o.bind(document,"keydown",a),_.transform&&o.bind(a.scrollWrap,"click",a),r.mouseUsed||o.bind(document,"mousemove",Le),o.bind(window,"resize scroll",a),De("bindEvents")}),a.setContent(I[1],c),a.updateCurrItem(),De("afterInit"),he||(w=setInterval(function(){Ge||W||j||h!==a.currItem.initialZoomLevel||a.updateSize()},1e3)),o.addClass(e,"pswp--visible")}},close:function(){l&&(l=!1,s=!0,De("close"),o.unbind(window,"resize",a),o.unbind(window,"scroll",y.scroll),o.unbind(document,"keydown",a),o.unbind(document,"mousemove",Le),_.transform&&o.unbind(a.scrollWrap,"click",a),W&&o.unbind(window,m,a),De("unbindEvents"),Nt(a.currItem,null,!0,a.destroy))},destroy:function(){De("destroy"),Zt&&clearTimeout(Zt),e.setAttribute("aria-hidden","true"),e.className=Z,w&&clearInterval(w),o.unbind(a.scrollWrap,f,a),o.unbind(window,"scroll",a),mt(),Ke(),Ie=null},panTo:function(e,t,n){n||(e>Q.min.x?e=Q.min.x:e<Q.max.x&&(e=Q.max.x),t>Q.min.y?t=Q.min.y:t<Q.max.y&&(t=Q.max.y)),ce.x=e,ce.y=t,Ae()},handleEvent:function(e){e=e||window.event,y[e.type]&&y[e.type](e)},goTo:function(e){var t=(e=be(e))-c;ye=t,c=e,a.currItem=_t(c),pe-=t,ke(fe.x*pe),Ke(),te=!1,a.updateCurrItem()},next:function(){a.goTo(c+1)},prev:function(){a.goTo(c-1)},updateCurrZoomItem:function(e){if(e&&De("beforeChange",0),I[1].el.children.length){var t=I[1].el.children[0];ee=o.hasClass(t,"pswp__zoom-wrap")?t.style:null}else ee=null;Q=a.currItem.bounds,x=h=a.currItem.initialZoomLevel,ce.x=Q.center.x,ce.y=Q.center.y,e&&De("afterChange")},invalidateCurrItems:function(){b=!0;for(var e=0;e<3;e++)I[e].item&&(I[e].item.needsUpdate=!0)},updateCurrItem:function(e){if(0!==ye){var t,n=Math.abs(ye);if(!(e&&n<2)){a.currItem=_t(c),ge=!1,De("beforeChange",ye),n>=3&&(p+=ye+(ye>0?-3:3),n=3);for(var i=0;i<n;i++)ye>0?(t=I.shift(),I[2]=t,Oe((++p+2)*fe.x,t.el.style),a.setContent(t,c-n+i+1+1)):(t=I.pop(),I.unshift(t),Oe(--p*fe.x,t.el.style),a.setContent(t,c+n-i-1-1));if(ee&&1===Math.abs(ye)){var o=_t(C);o.initialZoomLevel!==h&&(Bt(o,de),Vt(o),Ee(o))}ye=0,a.updateCurrZoomItem(),C=c,De("afterChange")}}},updateSize:function(t){if(!he&&r.modal){var n=o.getScrollY();if(L!==n&&(e.style.top=n+"px",L=n),!t&&ve.x===window.innerWidth&&ve.y===window.innerHeight)return;ve.x=window.innerWidth,ve.y=window.innerHeight,e.style.height=ve.y+"px"}if(de.x=a.scrollWrap.clientWidth,de.y=a.scrollWrap.clientHeight,Be(),fe.x=de.x+Math.round(de.x*r.spacing),fe.y=de.y,ke(fe.x*pe),De("beforeResize"),void 0!==p){for(var i,l,s,u=0;u<3;u++)i=I[u],Oe((u+p)*fe.x,i.el.style),s=c+u-1,r.loop&&zt()>2&&(s=be(s)),(l=_t(s))&&(b||l.needsUpdate||!l.bounds)?(a.cleanSlide(l),a.setContent(i,s),1===u&&(a.currItem=l,a.updateCurrZoomItem(!0)),l.needsUpdate=!1):-1===i.index&&s>=0&&a.setContent(i,s),l&&l.container&&(Bt(l,de),Vt(l),Ee(l));b=!1}x=h=a.currItem.initialZoomLevel,(Q=a.currItem.bounds)&&(ce.x=Q.center.x,ce.y=Q.center.y,Ae(!0)),De("resize")},zoomTo:function(e,t,n,i,a){t&&(x=h,ct.x=Math.abs(t.x)-ce.x,ct.y=Math.abs(t.y)-ce.y,Ze(ue,ce));var r=_e(e,!1),l={};Ue("x",r,l,e),Ue("y",r,l,e);var s=h,u=ce.x,c=ce.y;Pe(l);var d=function(t){1===t?(h=e,ce.x=l.x,ce.y=l.y):(h=(e-s)*t+s,ce.x=(l.x-u)*t+u,ce.y=(l.y-c)*t+c),a&&a(t),Ae(1===t)};n?qe("customZoomTo",0,1,n,i||o.easing.sine.inOut,d):d(1)}},je={},Je={},Qe={},et={},tt={},nt=[],it={},ot=[],at={},rt=0,lt={x:0,y:0},st=0,ut={x:0,y:0},ct={x:0,y:0},dt={x:0,y:0},pt=function(e,t){return at.x=Math.abs(e.x-t.x),at.y=Math.abs(e.y-t.y),Math.sqrt(at.x*at.x+at.y*at.y)},mt=function(){K&&(R(K),K=null)},ft={},yt=function(e,t){return ft.prevent=!function e(t,n){return!(!t||t===document)&&!(t.getAttribute("class")&&t.getAttribute("class").indexOf("pswp__scroll-wrap")>-1)&&(n(t)?t:e(t.parentNode,n))}(e.target,r.isClickableElement),De("preventDragEvent",e,t,ft),ft.prevent},ht=function(e,t){return t.x=e.pageX,t.y=e.pageY,t.id=e.identifier,t},xt=function(e,t,n){n.x=.5*(e.x+t.x),n.y=.5*(e.y+t.y)},vt=function(){var e=ce.y-a.currItem.initialPosition.y;return 1-Math.abs(e/(de.y/2))},gt={},wt={},bt=[],It=function(e){for(;bt.length>0;)bt.pop();return E?(le=0,nt.forEach(function(e){0===le?bt[0]=e:1===le&&(bt[1]=e),le++})):e.type.indexOf("touch")>-1?e.touches&&e.touches.length>0&&(bt[0]=ht(e.touches[0],gt),e.touches.length>1&&(bt[1]=ht(e.touches[1],wt))):(gt.x=e.pageX,gt.y=e.pageY,gt.id="",bt[0]=gt),bt},Ct=function(e,t){var n,i,o,l,s=ce[e]+t[e],u=t[e]>0,c=ut.x+t.x,d=ut.x-it.x;if(n=s>Q.min[e]||s<Q.max[e]?r.panEndFriction:1,s=ce[e]+t[e]*n,(r.allowPanToNext||h===a.currItem.initialZoomLevel)&&(ee?"h"!==ne||"x"!==e||X||(u?(s>Q.min[e]&&(n=r.panEndFriction,Q.min[e],i=Q.min[e]-ue[e]),(i<=0||d<0)&&zt()>1?(l=c,d<0&&c>it.x&&(l=it.x)):Q.min.x!==Q.max.x&&(o=s)):(s<Q.max[e]&&(n=r.panEndFriction,Q.max[e],i=ue[e]-Q.max[e]),(i<=0||d>0)&&zt()>1?(l=c,d>0&&c<it.x&&(l=it.x)):Q.min.x!==Q.max.x&&(o=s))):l=c,"x"===e))return void 0!==l&&(ke(l,!0),q=l!==it.x),Q.min.x!==Q.max.x&&(void 0!==o?ce.x=o:q||(ce.x+=t.x*n)),void 0!==l;te||q||h>a.currItem.fitRatio&&(ce[e]+=t[e]*n)},Dt=function(e){if(!("mousedown"===e.type&&e.button>0))if(Lt)e.preventDefault();else if(!B||"mousedown"!==e.type){if(yt(e,!0)&&e.preventDefault(),De("pointerDown"),E){var t=o.arraySearch(nt,e.pointerId,"id");t<0&&(t=nt.length),nt[t]={x:e.pageX,y:e.pageY,id:e.pointerId}}var n=It(e),i=n.length;$=null,Ke(),W&&1!==i||(W=ie=!0,o.bind(window,m,a),H=re=oe=Y=q=V=G=X=!1,ne=null,De("firstTouchStart",n),Ze(ue,ce),se.x=se.y=0,Ze(et,n[0]),Ze(tt,et),it.x=fe.x*pe,ot=[{x:et.x,y:et.y}],N=z=Se(),_e(h,!0),mt(),function e(){W&&(K=k(e),Mt())}()),!j&&i>1&&!te&&!q&&(x=h,X=!1,j=G=!0,se.y=se.x=0,Ze(ue,ce),Ze(je,n[0]),Ze(Je,n[1]),xt(je,Je,dt),ct.x=Math.abs(dt.x)-ce.x,ct.y=Math.abs(dt.y)-ce.y,J=pt(je,Je))}},St=function(e){if(e.preventDefault(),E){var t=o.arraySearch(nt,e.pointerId,"id");if(t>-1){var n=nt[t];n.x=e.pageX,n.y=e.pageY}}if(W){var i=It(e);if(ne||V||j)$=i;else if(ut.x!==fe.x*pe)ne="h";else{var a=Math.abs(i[0].x-et.x)-Math.abs(i[0].y-et.y);Math.abs(a)>=10&&(ne=a>0?"h":"v",$=i)}}},Mt=function(){if($){var e=$.length;if(0!==e)if(Ze(je,$[0]),Qe.x=je.x-et.x,Qe.y=je.y-et.y,j&&e>1){if(et.x=je.x,et.y=je.y,!Qe.x&&!Qe.y&&function(e,t){return e.x===t.x&&e.y===t.y}($[1],Je))return;Ze(Je,$[1]),X||(X=!0,De("zoomGestureStarted"));var t=pt(je,Je),n=kt(t);n>a.currItem.initialZoomLevel+a.currItem.initialZoomLevel/15&&(re=!0);var i=1,o=ze(),l=Ne();if(n<o)if(r.pinchToClose&&!re&&x<=a.currItem.initialZoomLevel){var s=1-(o-n)/(o/1.2);Me(s),De("onPinchClose",s),oe=!0}else(i=(o-n)/o)>1&&(i=1),n=o-i*(o/3);else n>l&&((i=(n-l)/(6*o))>1&&(i=1),n=l+i*o);i<0&&(i=0),xt(je,Je,lt),se.x+=lt.x-dt.x,se.y+=lt.y-dt.y,Ze(dt,lt),ce.x=Re("x",n),ce.y=Re("y",n),H=n>h,h=n,Ae()}else{if(!ne)return;if(ie&&(ie=!1,Math.abs(Qe.x)>=10&&(Qe.x-=$[0].x-tt.x),Math.abs(Qe.y)>=10&&(Qe.y-=$[0].y-tt.y)),et.x=je.x,et.y=je.y,0===Qe.x&&0===Qe.y)return;if("v"===ne&&r.closeOnVerticalDrag&&"fit"===r.scaleMode&&h===a.currItem.initialZoomLevel){se.y+=Qe.y,ce.y+=Qe.y;var u=vt();return Y=!0,De("onVerticalDrag",u),Me(u),void Ae()}!function(e,t,n){if(e-N>50){var i=ot.length>2?ot.shift():{};i.x=t,i.y=n,ot.push(i),N=e}}(Se(),je.x,je.y),V=!0,Q=a.currItem.bounds,Ct("x",Qe)||(Ct("y",Qe),Pe(ce),Ae())}}},Tt=function(e){if(_.isOldAndroid){if(B&&"mouseup"===e.type)return;e.type.indexOf("touch")>-1&&(clearTimeout(B),B=setTimeout(function(){B=0},600))}var t;if(De("pointerUp"),yt(e,!1)&&e.preventDefault(),E){var n=o.arraySearch(nt,e.pointerId,"id");n>-1&&(t=nt.splice(n,1)[0],navigator.pointerEnabled?t.type=e.pointerType||"mouse":(t.type={4:"mouse",2:"touch",3:"pen"}[e.pointerType],t.type||(t.type=e.pointerType||"mouse")))}var i,l=It(e),s=l.length;if("mouseup"===e.type&&(s=0),2===s)return $=null,!0;1===s&&Ze(tt,l[0]),0!==s||ne||te||(t||("mouseup"===e.type?t={x:e.pageX,y:e.pageY,type:"mouse"}:e.changedTouches&&e.changedTouches[0]&&(t={x:e.changedTouches[0].pageX,y:e.changedTouches[0].pageY,type:"touch"})),De("touchRelease",e,t));var u=-1;if(0===s&&(W=!1,o.unbind(window,m,a),mt(),j?u=0:-1!==st&&(u=Se()-st)),st=1===s?Se():-1,i=-1!==u&&u<150?"zoom":"swipe",j&&s<2&&(j=!1,1===s&&(i="zoomPointerUp"),De("zoomGestureEnded")),$=null,V||X||te||Y)if(Ke(),U||(U=At()),U.calculateSwipeSpeed("x"),Y)if(vt()<r.verticalDragRange)a.close();else{var c=ce.y,d=ae;qe("verticalDrag",0,1,300,o.easing.cubic.out,function(e){ce.y=(a.currItem.initialPosition.y-c)*e+c,Me((1-d)*e+d),Ae()}),De("onVerticalDrag",1)}else{if((q||te)&&0===s){if(Ot(i,U))return;i="zoomPointerUp"}te||("swipe"===i?!q&&h>a.currItem.fitRatio&&Et(U):Rt())}},At=function(){var e,t,n={lastFlickOffset:{},lastFlickDist:{},lastFlickSpeed:{},slowDownRatio:{},slowDownRatioReverse:{},speedDecelerationRatio:{},speedDecelerationRatioAbs:{},distanceOffset:{},backAnimDestination:{},backAnimStarted:{},calculateSwipeSpeed:function(i){ot.length>1?(e=Se()-N+50,t=ot[ot.length-2][i]):(e=Se()-z,t=tt[i]),n.lastFlickOffset[i]=et[i]-t,n.lastFlickDist[i]=Math.abs(n.lastFlickOffset[i]),n.lastFlickDist[i]>20?n.lastFlickSpeed[i]=n.lastFlickOffset[i]/e:n.lastFlickSpeed[i]=0,Math.abs(n.lastFlickSpeed[i])<.1&&(n.lastFlickSpeed[i]=0),n.slowDownRatio[i]=.95,n.slowDownRatioReverse[i]=1-n.slowDownRatio[i],n.speedDecelerationRatio[i]=1},calculateOverBoundsAnimOffset:function(e,t){n.backAnimStarted[e]||(ce[e]>Q.min[e]?n.backAnimDestination[e]=Q.min[e]:ce[e]<Q.max[e]&&(n.backAnimDestination[e]=Q.max[e]),void 0!==n.backAnimDestination[e]&&(n.slowDownRatio[e]=.7,n.slowDownRatioReverse[e]=1-n.slowDownRatio[e],n.speedDecelerationRatioAbs[e]<.05&&(n.lastFlickSpeed[e]=0,n.backAnimStarted[e]=!0,qe("bounceZoomPan"+e,ce[e],n.backAnimDestination[e],t||300,o.easing.sine.out,function(t){ce[e]=t,Ae()}))))},calculateAnimOffset:function(e){n.backAnimStarted[e]||(n.speedDecelerationRatio[e]=n.speedDecelerationRatio[e]*(n.slowDownRatio[e]+n.slowDownRatioReverse[e]-n.slowDownRatioReverse[e]*n.timeDiff/10),n.speedDecelerationRatioAbs[e]=Math.abs(n.lastFlickSpeed[e]*n.speedDecelerationRatio[e]),n.distanceOffset[e]=n.lastFlickSpeed[e]*n.speedDecelerationRatio[e]*n.timeDiff,ce[e]+=n.distanceOffset[e])},panAnimLoop:function(){if(We.zoomPan&&(We.zoomPan.raf=k(n.panAnimLoop),n.now=Se(),n.timeDiff=n.now-n.lastNow,n.lastNow=n.now,n.calculateAnimOffset("x"),n.calculateAnimOffset("y"),Ae(),n.calculateOverBoundsAnimOffset("x"),n.calculateOverBoundsAnimOffset("y"),n.speedDecelerationRatioAbs.x<.05&&n.speedDecelerationRatioAbs.y<.05))return ce.x=Math.round(ce.x),ce.y=Math.round(ce.y),Ae(),void Xe("zoomPan")}};return n},Et=function(e){if(e.calculateSwipeSpeed("y"),Q=a.currItem.bounds,e.backAnimDestination={},e.backAnimStarted={},Math.abs(e.lastFlickSpeed.x)<=.05&&Math.abs(e.lastFlickSpeed.y)<=.05)return e.speedDecelerationRatioAbs.x=e.speedDecelerationRatioAbs.y=0,e.calculateOverBoundsAnimOffset("x"),e.calculateOverBoundsAnimOffset("y"),!0;Ve("zoomPan"),e.lastNow=Se(),e.panAnimLoop()},Ot=function(e,t){var n,i,l;if(te||(rt=c),"swipe"===e){var s=et.x-tt.x,u=t.lastFlickDist.x<10;s>30&&(u||t.lastFlickOffset.x>20)?i=-1:s<-30&&(u||t.lastFlickOffset.x<-20)&&(i=1)}i&&((c+=i)<0?(c=r.loop?zt()-1:0,l=!0):c>=zt()&&(c=r.loop?0:zt()-1,l=!0),l&&!r.loop||(ye+=i,pe-=i,n=!0));var d,p=fe.x*pe,m=Math.abs(p-ut.x);return n||p>ut.x==t.lastFlickSpeed.x>0?(d=Math.abs(t.lastFlickSpeed.x)>0?m/Math.abs(t.lastFlickSpeed.x):333,d=Math.min(d,400),d=Math.max(d,250)):d=333,rt===c&&(n=!1),te=!0,De("mainScrollAnimStart"),qe("mainScroll",ut.x,p,d,o.easing.cubic.out,ke,function(){Ke(),te=!1,rt=-1,(n||rt!==c)&&a.updateCurrItem(),De("mainScrollAnimComplete")}),n&&a.updateCurrItem(!0),n},kt=function(e){return 1/J*e*x},Rt=function(){var e=h,t=ze(),n=Ne();h<t?e=t:h>n&&(e=n);var i,r=ae;return oe&&!H&&!re&&h<t?(a.close(),!0):(oe&&(i=function(e){Me((1-r)*e+r)}),a.zoomTo(e,0,200,o.easing.cubic.out,i),!0)};we("Gestures",{publicMethods:{initGestures:function(){var e=function(e,t,n,i,o){D=e+t,S=e+n,M=e+i,T=o?e+o:""};(E=_.pointerEvent)&&_.touch&&(_.touch=!1),E?navigator.pointerEnabled?e("pointer","down","move","up","cancel"):e("MSPointer","Down","Move","Up","Cancel"):_.touch?(e("touch","start","move","end","cancel"),O=!0):e("mouse","down","move","up"),m=S+" "+M+" "+T,f=D,E&&!O&&(O=navigator.maxTouchPoints>1||navigator.msMaxTouchPoints>1),a.likelyTouchDevice=O,y[D]=Dt,y[S]=St,y[M]=Tt,T&&(y[T]=y[M]),_.touch&&(f+=" mousedown",m+=" mousemove mouseup",y.mousedown=y[D],y.mousemove=y[S],y.mouseup=y[M]),O||(r.allowPanToNext=!1)}}});var Zt,Pt,Ft,Lt,_t,zt,Nt=function(t,n,i,l){var s;Zt&&clearTimeout(Zt),Lt=!0,Ft=!0,t.initialLayout?(s=t.initialLayout,t.initialLayout=null):s=r.getThumbBoundsFn&&r.getThumbBoundsFn(c);var d,p,m=i?r.hideAnimationDuration:r.showAnimationDuration,f=function(){Xe("initialZoom"),i?(a.template.removeAttribute("style"),a.bg.removeAttribute("style")):(Me(1),n&&(n.style.display="block"),o.addClass(e,"pswp--animated-in"),De("initialZoom"+(i?"OutEnd":"InEnd"))),l&&l(),Lt=!1};if(!m||!s||void 0===s.x)return De("initialZoom"+(i?"Out":"In")),h=t.initialZoomLevel,Ze(ce,t.initialPosition),Ae(),e.style.opacity=i?0:1,Me(1),void(m?setTimeout(function(){f()},m):f());d=u,p=!a.currItem.src||a.currItem.loadError||r.showHideOpacity,t.miniImg&&(t.miniImg.style.webkitBackfaceVisibility="hidden"),i||(h=s.w/t.w,ce.x=s.x,ce.y=s.y-P,a[p?"template":"bg"].style.opacity=.001,Ae()),Ve("initialZoom"),i&&!d&&o.removeClass(e,"pswp--animated-in"),p&&(i?o[(d?"remove":"add")+"Class"](e,"pswp--animate_opacity"):setTimeout(function(){o.addClass(e,"pswp--animate_opacity")},30)),Zt=setTimeout(function(){if(De("initialZoom"+(i?"Out":"In")),i){var n=s.w/t.w,a={x:ce.x,y:ce.y},r=h,l=ae,u=function(t){1===t?(h=n,ce.x=s.x,ce.y=s.y-L):(h=(n-r)*t+r,ce.x=(s.x-a.x)*t+a.x,ce.y=(s.y-L-a.y)*t+a.y),Ae(),p?e.style.opacity=1-t:Me(l-t*l)};d?qe("initialZoom",0,1,m,o.easing.cubic.out,u,f):(u(1),Zt=setTimeout(f,m+20))}else h=t.initialZoomLevel,Ze(ce,t.initialPosition),Ae(),Me(1),p?e.style.opacity=1:Me(1),Zt=setTimeout(f,m+20)},i?25:90)},Ut={},Ht=[],Yt={index:0,errorMsg:'<div class="pswp__error-msg"><a href="%url%" target="_blank">The image</a> could not be loaded.</div>',forceProgressiveLoading:!1,preload:[1,1],getNumItemsFn:function(){return Pt.length}},Bt=function(e,t,n){if(e.src&&!e.loadError){var i=!n;if(i&&(e.vGap||(e.vGap={top:0,bottom:0}),De("parseVerticalMargin",e)),Ut.x=t.x,Ut.y=t.y-e.vGap.top-e.vGap.bottom,i){var o=Ut.x/e.w,a=Ut.y/e.h;e.fitRatio=o<a?o:a;var l=r.scaleMode;"orig"===l?n=1:"fit"===l&&(n=e.fitRatio),n>1&&(n=1),e.initialZoomLevel=n,e.bounds||(e.bounds={center:{x:0,y:0},max:{x:0,y:0},min:{x:0,y:0}})}if(!n)return;return function(e,t,n){var i=e.bounds;i.center.x=Math.round((Ut.x-t)/2),i.center.y=Math.round((Ut.y-n)/2)+e.vGap.top,i.max.x=t>Ut.x?Math.round(Ut.x-t):i.center.x,i.max.y=n>Ut.y?Math.round(Ut.y-n)+e.vGap.top:i.center.y,i.min.x=t>Ut.x?0:i.center.x,i.min.y=n>Ut.y?e.vGap.top:i.center.y}(e,e.w*n,e.h*n),i&&n===e.initialZoomLevel&&(e.initialPosition=e.bounds.center),e.bounds}return e.w=e.h=0,e.initialZoomLevel=e.fitRatio=1,e.bounds={center:{x:0,y:0},max:{x:0,y:0},min:{x:0,y:0}},e.initialPosition=e.bounds.center,e.bounds},Wt=function(e,t,n,i,o,r){t.loadError||i&&(t.imageAppended=!0,Vt(t,i,t===a.currItem&&ge),n.appendChild(i),r&&setTimeout(function(){t&&t.loaded&&t.placeholder&&(t.placeholder.style.display="none",t.placeholder=null)},500))},Gt=function(e){e.loading=!0,e.loaded=!1;var t=e.img=o.createEl("pswp__img","img"),n=function(){e.loading=!1,e.loaded=!0,e.loadComplete?e.loadComplete(e):e.img=null,t.onload=t.onerror=null,t=null};return t.onload=n,t.onerror=function(){e.loadError=!0,n()},t.src=e.src,t},Xt=function(e,t){if(e.src&&e.loadError&&e.container)return t&&(e.container.innerHTML=""),e.container.innerHTML=r.errorMsg.replace("%url%",e.src),!0},Vt=function(e,t,n){if(e.src){t||(t=e.container.lastChild);var i=n?e.w:Math.round(e.w*e.fitRatio),o=n?e.h:Math.round(e.h*e.fitRatio);e.placeholder&&!e.loaded&&(e.placeholder.style.width=i+"px",e.placeholder.style.height=o+"px"),t.style.width=i+"px",t.style.height=o+"px"}},Kt=function(){if(Ht.length){for(var e,t=0;t<Ht.length;t++)(e=Ht[t]).holder.index===e.index&&Wt(e.index,e.item,e.baseDiv,e.img,0,e.clearPlaceholder);Ht=[]}};we("Controller",{publicMethods:{lazyLoadItem:function(e){e=be(e);var t=_t(e);t&&(!t.loaded&&!t.loading||b)&&(De("gettingData",e,t),t.src&&Gt(t))},initController:function(){o.extend(r,Yt,!0),a.items=Pt=n,_t=a.getItemAt,zt=r.getNumItemsFn,r.loop,zt()<3&&(r.loop=!1),Ce("beforeChange",function(e){var t,n=r.preload,i=null===e||e>=0,o=Math.min(n[0],zt()),l=Math.min(n[1],zt());for(t=1;t<=(i?l:o);t++)a.lazyLoadItem(c+t);for(t=1;t<=(i?o:l);t++)a.lazyLoadItem(c-t)}),Ce("initialLayout",function(){a.currItem.initialLayout=r.getThumbBoundsFn&&r.getThumbBoundsFn(c)}),Ce("mainScrollAnimComplete",Kt),Ce("initialZoomInEnd",Kt),Ce("destroy",function(){for(var e,t=0;t<Pt.length;t++)(e=Pt[t]).container&&(e.container=null),e.placeholder&&(e.placeholder=null),e.img&&(e.img=null),e.preloader&&(e.preloader=null),e.loadError&&(e.loaded=e.loadError=!1);Ht=null})},getItemAt:function(e){return e>=0&&void 0!==Pt[e]&&Pt[e]},allowProgressiveImg:function(){return r.forceProgressiveLoading||!O||r.mouseUsed||screen.width>1200},setContent:function(e,t){r.loop&&(t=be(t));var n=a.getItemAt(e.index);n&&(n.container=null);var i,s=a.getItemAt(t);if(s){De("gettingData",t,s),e.index=t,e.item=s;var u=s.container=o.createEl("pswp__zoom-wrap");if(!s.src&&s.html&&(s.html.tagName?u.appendChild(s.html):u.innerHTML=s.html),Xt(s),Bt(s,de),!s.src||s.loadError||s.loaded)s.src&&!s.loadError&&((i=o.createEl("pswp__img","img")).style.opacity=1,i.src=s.src,Vt(s,i),Wt(0,s,u,i));else{if(s.loadComplete=function(n){if(l){if(e&&e.index===t){if(Xt(n,!0))return n.loadComplete=n.img=null,Bt(n,de),Ee(n),void(e.index===c&&a.updateCurrZoomItem());n.imageAppended?!Lt&&n.placeholder&&(n.placeholder.style.display="none",n.placeholder=null):_.transform&&(te||Lt)?Ht.push({item:n,baseDiv:u,img:n.img,index:t,holder:e,clearPlaceholder:!0}):Wt(0,n,u,n.img,0,!0)}n.loadComplete=null,n.img=null,De("imageLoadComplete",t,n)}},o.features.transform){var d="pswp__img pswp__img--placeholder";d+=s.msrc?"":" pswp__img--placeholder--blank";var p=o.createEl(d,s.msrc?"img":"");s.msrc&&(p.src=s.msrc),Vt(s,p),u.appendChild(p),s.placeholder=p}s.loading||Gt(s),a.allowProgressiveImg()&&(!Ft&&_.transform?Ht.push({item:s,baseDiv:u,img:s.img,index:t,holder:e}):Wt(0,s,u,s.img,0,!0))}Ft||t!==c?Ee(s):(ee=u.style,Nt(s,i||s.img)),e.el.innerHTML="",e.el.appendChild(u)}else e.el.innerHTML=""},cleanSlide:function(e){e.img&&(e.img.onload=e.img.onerror=null),e.loaded=e.loading=e.img=e.imageAppended=!1}}});var qt,$t,jt={},Jt=function(e,t,n){var i=document.createEvent("CustomEvent"),o={origEvent:e,target:e.target,releasePoint:t,pointerType:n||"touch"};i.initCustomEvent("pswpTap",!0,!0,o),e.target.dispatchEvent(i)};we("Tap",{publicMethods:{initTap:function(){Ce("firstTouchStart",a.onTapStart),Ce("touchRelease",a.onTapRelease),Ce("destroy",function(){jt={},qt=null})},onTapStart:function(e){e.length>1&&(clearTimeout(qt),qt=null)},onTapRelease:function(e,t){var n,i;if(t&&!V&&!G&&!Ge){var a=t;if(qt&&(clearTimeout(qt),qt=null,n=a,i=jt,Math.abs(n.x-i.x)<25&&Math.abs(n.y-i.y)<25))return void De("doubleTap",a);if("mouse"===t.type)return void Jt(e,t,"mouse");if("BUTTON"===e.target.tagName.toUpperCase()||o.hasClass(e.target,"pswp__single-tap"))return void Jt(e,t);Ze(jt,a),qt=setTimeout(function(){Jt(e,t),qt=null},300)}}}}),we("DesktopZoom",{publicMethods:{initDesktopZoom:function(){F||(O?Ce("mouseUsed",function(){a.setupDesktopZoom()}):a.setupDesktopZoom(!0))},setupDesktopZoom:function(t){$t={};var n="wheel mousewheel DOMMouseScroll";Ce("bindEvents",function(){o.bind(e,n,a.handleMouseWheel)}),Ce("unbindEvents",function(){$t&&o.unbind(e,n,a.handleMouseWheel)}),a.mouseZoomedIn=!1;var i,r=function(){a.mouseZoomedIn&&(o.removeClass(e,"pswp--zoomed-in"),a.mouseZoomedIn=!1),h<1?o.addClass(e,"pswp--zoom-allowed"):o.removeClass(e,"pswp--zoom-allowed"),l()},l=function(){i&&(o.removeClass(e,"pswp--dragging"),i=!1)};Ce("resize",r),Ce("afterChange",r),Ce("pointerDown",function(){a.mouseZoomedIn&&(i=!0,o.addClass(e,"pswp--dragging"))}),Ce("pointerUp",l),t||r()},handleMouseWheel:function(e){if(h<=a.currItem.fitRatio)return r.modal&&(!r.closeOnScroll||Ge||W?e.preventDefault():A&&Math.abs(e.deltaY)>2&&(u=!0,a.close())),!0;if(e.stopPropagation(),$t.x=0,"deltaX"in e)1===e.deltaMode?($t.x=18*e.deltaX,$t.y=18*e.deltaY):($t.x=e.deltaX,$t.y=e.deltaY);else if("wheelDelta"in e)e.wheelDeltaX&&($t.x=-.16*e.wheelDeltaX),e.wheelDeltaY?$t.y=-.16*e.wheelDeltaY:$t.y=-.16*e.wheelDelta;else{if(!("detail"in e))return;$t.y=e.detail}_e(h,!0);var t=ce.x-$t.x,n=ce.y-$t.y;(r.modal||t<=Q.min.x&&t>=Q.max.x&&n<=Q.min.y&&n>=Q.max.y)&&e.preventDefault(),a.panTo(t,n)},toggleDesktopZoom:function(t){t=t||{x:de.x/2+me.x,y:de.y/2+me.y};var n=r.getDoubleTapZoom(!0,a.currItem),i=h===n;a.mouseZoomedIn=!i,a.zoomTo(i?a.currItem.initialZoomLevel:n,t,333),o[(i?"remove":"add")+"Class"](e,"pswp--zoomed-in")}}});var Qt,en,tn,nn,on,an,rn,ln,sn,un,cn,dn,pn={history:!0,galleryUID:1},mn=function(){return cn.hash.substring(1)},fn=function(){Qt&&clearTimeout(Qt),tn&&clearTimeout(tn)},yn=function(){var e=mn(),t={};if(e.length<5)return t;var n,i=e.split("&");for(n=0;n<i.length;n++)if(i[n]){var o=i[n].split("=");o.length<2||(t[o[0]]=o[1])}if(r.galleryPIDs){var a=t.pid;for(t.pid=0,n=0;n<Pt.length;n++)if(Pt[n].pid===a){t.pid=n;break}}else t.pid=parseInt(t.pid,10)-1;return t.pid<0&&(t.pid=0),t},hn=function e(){if(tn&&clearTimeout(tn),Ge||W)tn=setTimeout(e,500);else{nn?clearTimeout(en):nn=!0;var t=c+1,n=_t(c);n.hasOwnProperty("pid")&&(t=n.pid);var i=rn+"&gid="+r.galleryUID+"&pid="+t;ln||-1===cn.hash.indexOf(i)&&(un=!0);var o=cn.href.split("#")[0]+"#"+i;dn?"#"+i!==window.location.hash&&history[ln?"replaceState":"pushState"]("",document.title,o):ln?cn.replace(o):cn.hash=i,ln=!0,en=setTimeout(function(){nn=!1},60)}};we("History",{publicMethods:{initHistory:function(){if(o.extend(r,pn,!0),r.history){cn=window.location,un=!1,sn=!1,ln=!1,rn=mn(),dn="pushState"in history,rn.indexOf("gid=")>-1&&(rn=(rn=rn.split("&gid=")[0]).split("?gid=")[0]),Ce("afterChange",a.updateURL),Ce("unbindEvents",function(){o.unbind(window,"hashchange",a.onHashChange)});var e=function(){an=!0,sn||(un?history.back():rn?cn.hash=rn:dn?history.pushState("",document.title,cn.pathname+cn.search):cn.hash=""),fn()};Ce("unbindEvents",function(){u&&e()}),Ce("destroy",function(){an||e()}),Ce("firstUpdate",function(){c=yn().pid});var t=rn.indexOf("pid=");t>-1&&"&"===(rn=rn.substring(0,t)).slice(-1)&&(rn=rn.slice(0,-1)),setTimeout(function(){l&&o.bind(window,"hashchange",a.onHashChange)},40)}},onHashChange:function(){if(mn()===rn)return sn=!0,void a.close();nn||(on=!0,a.goTo(yn().pid),on=!1)},updateURL:function(){fn(),on||(ln?Qt=setTimeout(hn,800):hn())}}}),o.extend(a,$e)}});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],23:[function(require,module,exports){
"use strict";require("./doc/polyfill"),require("./doc/components/clipboard").init(),require("./doc/components/code-copy").init(),require("./doc/components/expand").init(),require("./doc/components/gallery").init(),require("./doc/components/json-viewer").init(),require("./doc/components/scroll-anchor-into-view").init(),require("./doc/components/shortlink").init(),require("./doc/components/table").init(),require("./doc/components/tabs").init(),require("./doc/components/toc-tree-menu").init(),require("./doc/components/zoom").init(),require("./doc/components/editor-shortcut").init();

},{"./doc/components/clipboard":1,"./doc/components/code-copy":2,"./doc/components/editor-shortcut":3,"./doc/components/expand":4,"./doc/components/gallery":5,"./doc/components/json-viewer":7,"./doc/components/scroll-anchor-into-view":9,"./doc/components/shortlink":10,"./doc/components/table":11,"./doc/components/tabs":12,"./doc/components/toc-tree-menu":16,"./doc/components/zoom":17,"./doc/polyfill":18}],24:[function(require,module,exports){
!function(e,t){if("function"==typeof define&&define.amd)define(["module","select"],t);else if("undefined"!=typeof exports)t(module,require("select"));else{var i={exports:{}};t(i,e.select),e.clipboardAction=i.exports}}(this,function(e,t){"use strict";var i,n=(i=t)&&i.__esModule?i:{default:i};var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.resolveOptions(t),this.initSelection()}return r(e,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var i=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=i+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,n.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,n.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":a(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),e}();e.exports=o});

},{"select":33}],25:[function(require,module,exports){
!function(t,e){if("function"==typeof define&&define.amd)define(["module","./clipboard-action","tiny-emitter","good-listener"],e);else if("undefined"!=typeof exports)e(module,require("./clipboard-action"),require("tiny-emitter"),require("good-listener"));else{var n={exports:{}};e(n,t.clipboardAction,t.tinyEmitter,t.goodListener),t.clipboard=n.exports}}(this,function(t,e,n,o){"use strict";var r=c(e),i=c(n),u=c(o);function c(t){return t&&t.__esModule?t:{default:t}}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var l=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();var f=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var o=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return o.resolveOptions(n),o.listenClick(t),o}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),l(e,[{key:"resolveOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText,this.container="object"===a(t.container)?t.container:document.body}},{key:"listenClick",value:function(t){var e=this;this.listener=(0,u.default)(t,"click",function(t){return e.onClick(t)})}},{key:"onClick",value:function(t){var e=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new r.default({action:this.action(e),target:this.target(e),text:this.text(e),container:this.container,trigger:e,emitter:this})}},{key:"defaultAction",value:function(t){return s("action",t)}},{key:"defaultTarget",value:function(t){var e=s("target",t);if(e)return document.querySelector(e)}},{key:"defaultText",value:function(t){return s("text",t)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],e="string"==typeof t?[t]:t,n=!!document.queryCommandSupported;return e.forEach(function(t){n=n&&!!document.queryCommandSupported(t)}),n}}]),e}();function s(t,e){var n="data-clipboard-"+t;if(e.hasAttribute(n))return e.getAttribute(n)}t.exports=f});

},{"./clipboard-action":24,"good-listener":30,"tiny-emitter":34}],26:[function(require,module,exports){
var DOCUMENT_NODE_TYPE=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var proto=Element.prototype;proto.matches=proto.matchesSelector||proto.mozMatchesSelector||proto.msMatchesSelector||proto.oMatchesSelector||proto.webkitMatchesSelector}function closest(e,t){for(;e&&e.nodeType!==DOCUMENT_NODE_TYPE;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}module.exports=closest;

},{}],27:[function(require,module,exports){
var closest=require("./closest");function _delegate(e,t,n,l,r){var o=listener.apply(this,arguments);return e.addEventListener(n,o,r),{destroy:function(){e.removeEventListener(n,o,r)}}}function delegate(e,t,n,l,r){return"function"==typeof e.addEventListener?_delegate.apply(null,arguments):"function"==typeof n?_delegate.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,function(e){return _delegate(e,t,n,l,r)}))}function listener(e,t,n,l){return function(n){n.delegateTarget=closest(n.target,t),n.delegateTarget&&l.call(e,n)}}module.exports=delegate;

},{"./closest":26}],28:[function(require,module,exports){
(function (process,global){(function (){
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.ES6Promise=e()}(this,function(){"use strict";function t(t){return"function"==typeof t}var e=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},n=0,r=void 0,o=void 0,i=function(t,e){h[n]=t,h[n+1]=e,2===(n+=2)&&(o?o(v):m())};var s="undefined"!=typeof window?window:void 0,u=s||{},c=u.MutationObserver||u.WebKitMutationObserver,a="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),f="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function l(){var t=setTimeout;return function(){return t(v,1)}}var h=new Array(1e3);function v(){for(var t=0;t<n;t+=2){(0,h[t])(h[t+1]),h[t]=void 0,h[t+1]=void 0}n=0}var p,d,_,y,m=void 0;function b(t,e){var n=this,r=new this.constructor(A);void 0===r[g]&&q(r);var o=n._state;if(o){var s=arguments[o-1];i(function(){return Y(o,r,s,n._result)})}else O(n,r,t,e);return r}function w(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(A);return M(e,t),e}a?m=function(){return process.nextTick(v)}:c?(d=0,_=new c(v),y=document.createTextNode(""),_.observe(y,{characterData:!0}),m=function(){y.data=d=++d%2}):f?((p=new MessageChannel).port1.onmessage=v,m=function(){return p.port2.postMessage(0)}):m=void 0===s&&"function"==typeof require?function(){try{var t=Function("return this")().require("vertx");return void 0!==(r=t.runOnLoop||t.runOnContext)?function(){r(v)}:l()}catch(t){return l()}}():l();var g=Math.random().toString(36).substring(2);function A(){}var j=void 0,S=1,E=2;function T(e,n,r){n.constructor===e.constructor&&r===b&&n.constructor.resolve===w?function(t,e){e._state===S?x(t,e._result):e._state===E?C(t,e._result):O(e,void 0,function(e){return M(t,e)},function(e){return C(t,e)})}(e,n):void 0===r?x(e,n):t(r)?function(t,e,n){i(function(t){var r=!1,o=function(t,e,n,r){try{t.call(e,n,r)}catch(t){return t}}(n,e,function(n){r||(r=!0,e!==n?M(t,n):x(t,n))},function(e){r||(r=!0,C(t,e))},t._label);!r&&o&&(r=!0,C(t,o))},t)}(e,n,r):x(e,n)}function M(t,e){if(t===e)C(t,new TypeError("You cannot resolve a promise with itself"));else if(o=typeof(r=e),null===r||"object"!==o&&"function"!==o)x(t,e);else{var n=void 0;try{n=e.then}catch(e){return void C(t,e)}T(t,e,n)}var r,o}function P(t){t._onerror&&t._onerror(t._result),F(t)}function x(t,e){t._state===j&&(t._result=e,t._state=S,0!==t._subscribers.length&&i(F,t))}function C(t,e){t._state===j&&(t._state=E,t._result=e,i(P,t))}function O(t,e,n,r){var o=t._subscribers,s=o.length;t._onerror=null,o[s]=e,o[s+S]=n,o[s+E]=r,0===s&&t._state&&i(F,t)}function F(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?Y(n,r,o,i):o(i);t._subscribers.length=0}}function Y(e,n,r,o){var i=t(r),s=void 0,u=void 0,c=!0;if(i){try{s=r(o)}catch(t){c=!1,u=t}if(n===s)return void C(n,new TypeError("A promises callback cannot return that same promise."))}else s=o;n._state!==j||(i&&c?M(n,s):!1===c?C(n,u):e===S?x(n,s):e===E&&C(n,s))}var k=0;function q(t){t[g]=k++,t._state=void 0,t._result=void 0,t._subscribers=[]}var D=function(){function t(t,n){this._instanceConstructor=t,this.promise=new t(A),this.promise[g]||q(this.promise),e(n)?(this.length=n.length,this._remaining=n.length,this._result=new Array(this.length),0===this.length?x(this.promise,this._result):(this.length=this.length||0,this._enumerate(n),0===this._remaining&&x(this.promise,this._result))):C(this.promise,new Error("Array Methods must be provided an Array"))}return t.prototype._enumerate=function(t){for(var e=0;this._state===j&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===w){var o=void 0,i=void 0,s=!1;try{o=t.then}catch(t){s=!0,i=t}if(o===b&&t._state!==j)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(n===K){var u=new n(A);s?C(u,i):T(u,t,o),this._willSettleAt(u,e)}else this._willSettleAt(new n(function(e){return e(t)}),e)}else this._willSettleAt(r(t),e)},t.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===j&&(this._remaining--,t===E?C(r,n):this._result[e]=n),0===this._remaining&&x(r,this._result)},t.prototype._willSettleAt=function(t,e){var n=this;O(t,void 0,function(t){return n._settledAt(S,e,t)},function(t){return n._settledAt(E,e,t)})},t}();var K=function(){function e(t){this[g]=k++,this._result=this._state=void 0,this._subscribers=[],A!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof e?function(t,e){try{e(function(e){M(t,e)},function(e){C(t,e)})}catch(e){C(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return e.prototype.catch=function(t){return this.then(null,t)},e.prototype.finally=function(e){var n=this.constructor;return t(e)?this.then(function(t){return n.resolve(e()).then(function(){return t})},function(t){return n.resolve(e()).then(function(){throw t})}):this.then(e,e)},e}();return K.prototype.then=b,K.all=function(t){return new D(this,t).promise},K.race=function(t){var n=this;return e(t)?new n(function(e,r){for(var o=t.length,i=0;i<o;i++)n.resolve(t[i]).then(e,r)}):new n(function(t,e){return e(new TypeError("You must pass an array to race."))})},K.resolve=w,K.reject=function(t){var e=new this(A);return C(e,t),e},K._setScheduler=function(t){o=t},K._setAsap=function(t){i=t},K._asap=i,K.polyfill=function(){var t=void 0;if("undefined"!=typeof global)t=global;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var n=null;try{n=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===n&&!e.cast)return}t.Promise=K},K.Promise=K,K});

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":32}],29:[function(require,module,exports){
exports.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},exports.nodeList=function(t){var n=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in t&&(0===t.length||exports.node(t[0]))},exports.string=function(t){return"string"==typeof t||t instanceof String},exports.fn=function(t){return"[object Function]"===Object.prototype.toString.call(t)};

},{}],30:[function(require,module,exports){
var is=require("./is"),delegate=require("delegate");function listen(e,t,r){if(!e&&!t&&!r)throw new Error("Missing required arguments");if(!is.string(t))throw new TypeError("Second argument must be a String");if(!is.fn(r))throw new TypeError("Third argument must be a Function");if(is.node(e))return listenNode(e,t,r);if(is.nodeList(e))return listenNodeList(e,t,r);if(is.string(e))return listenSelector(e,t,r);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function listenNode(e,t,r){return e.addEventListener(t,r),{destroy:function(){e.removeEventListener(t,r)}}}function listenNodeList(e,t,r){return Array.prototype.forEach.call(e,function(e){e.addEventListener(t,r)}),{destroy:function(){Array.prototype.forEach.call(e,function(e){e.removeEventListener(t,r)})}}}function listenSelector(e,t,r){return delegate(document.body,e,t,r)}module.exports=listen;

},{"./is":29,"delegate":27}],31:[function(require,module,exports){
"use strict";!function(){function e(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function t(t,n,o){var r,i=new Promise(function(i,u){e(r=t[n].apply(t,o)).then(i,u)});return i.request=r,i}function n(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function o(e,n,o,r){r.forEach(function(r){r in o.prototype&&(e.prototype[r]=function(){return t(this[n],r,arguments)})})}function r(e,t,n,o){o.forEach(function(o){o in n.prototype&&(e.prototype[o]=function(){return this[t][o].apply(this[t],arguments)})})}function i(e,n,o,r){r.forEach(function(r){r in o.prototype&&(e.prototype[r]=function(){return e=this[n],(o=t(e,r,arguments)).then(function(e){if(e)return new c(e,o.request)});var e,o})})}function u(e){this._index=e}function c(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function p(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function a(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new p(n)}function f(e){this._db=e}n(u,"_index",["name","keyPath","multiEntry","unique"]),o(u,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),i(u,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(c,"_cursor",["direction","key","primaryKey","value"]),o(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(c.prototype[t]=function(){var n=this,o=arguments;return Promise.resolve().then(function(){return n._cursor[t].apply(n._cursor,o),e(n._request).then(function(e){if(e)return new c(e,n._request)})})})}),s.prototype.createIndex=function(){return new u(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new u(this._store.index.apply(this._store,arguments))},n(s,"_store",["name","keyPath","indexNames","autoIncrement"]),o(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),i(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),r(s,"_store",IDBObjectStore,["deleteIndex"]),p.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},n(p,"_tx",["objectStoreNames","mode"]),r(p,"_tx",IDBTransaction,["abort"]),a.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},n(a,"_db",["name","version","objectStoreNames"]),r(a,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new p(this._db.transaction.apply(this._db,arguments))},n(f,"_db",["name","version","objectStoreNames"]),r(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[s,u].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t,n=(t=arguments,Array.prototype.slice.call(t)),o=n[n.length-1],r=this._store||this._index,i=r[e].apply(r,n.slice(0,-1));i.onsuccess=function(){o(i.result)}})})}),[u,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,o=[];return new Promise(function(r){n.iterateCursor(e,function(e){e?(o.push(e.value),void 0===t||o.length!=t?e.continue():r(o)):r(o)})})})});var d={open:function(e,n,o){var r=t(indexedDB,"open",[e,n]),i=r.request;return i&&(i.onupgradeneeded=function(e){o&&o(new a(i.result,e.oldVersion,i.transaction))}),r.then(function(e){return new f(e)})},delete:function(e){return t(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=d,module.exports.default=module.exports):self.idb=d}();

},{}],32:[function(require,module,exports){
var cachedSetTimeout,cachedClearTimeout,process=module.exports={};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var currentQueue,queue=[],draining=!1,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.prependListener=noop,process.prependOnceListener=noop,process.listeners=function(e){return[]},process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],33:[function(require,module,exports){
function select(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var n=e.hasAttribute("readonly");n||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),n||e.removeAttribute("readonly"),t=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var a=window.getSelection(),o=document.createRange();o.selectNodeContents(e),a.removeAllRanges(),a.addRange(o),t=a.toString()}return t}module.exports=select;

},{}],34:[function(require,module,exports){
function E(){}E.prototype={on:function(t,n,e){var i=this.e||(this.e={});return(i[t]||(i[t]=[])).push({fn:n,ctx:e}),this},once:function(t,n,e){var i=this;function f(){i.off(t,f),n.apply(e,arguments)}return f._=n,this.on(t,f,e)},emit:function(t){for(var n=[].slice.call(arguments,1),e=((this.e||(this.e={}))[t]||[]).slice(),i=0,f=e.length;i<f;i++)e[i].fn.apply(e[i].ctx,n);return this},off:function(t,n){var e=this.e||(this.e={}),i=e[t],f=[];if(i&&n)for(var o=0,r=i.length;o<r;o++)i[o].fn!==n&&i[o].fn._!==n&&f.push(i[o]);return f.length?e[t]=f:delete e[t],this}},module.exports=E;

},{}],35:[function(require,module,exports){
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.WHATWGFetch={})}(this,function(t){"use strict";var e="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==e&&e,r={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(r.arrayBuffer)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],n=ArrayBuffer.isView||function(t){return t&&o.indexOf(Object.prototype.toString.call(t))>-1};function i(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function s(t){return"string"!=typeof t&&(t=String(t)),t}function a(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return r.iterable&&(e[Symbol.iterator]=function(){return e}),e}function h(t){this.map={},t instanceof h?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function f(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function u(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function c(t){var e=new FileReader,r=u(e);return e.readAsArrayBuffer(t),r}function d(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:r.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:r.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():r.arrayBuffer&&r.blob&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=d(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):r.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||n(t))?this._bodyArrayBuffer=d(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r.blob&&(this.blob=function(){var t=f(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var t=f(this);return t||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(c)}),this.text=function(){var t,e,r,o=f(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,r=u(e),e.readAsText(t),r;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),o=0;o<e.length;o++)r[o]=String.fromCharCode(e[o]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},r.formData&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}h.prototype.append=function(t,e){t=i(t),e=s(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},h.prototype.delete=function(t){delete this.map[i(t)]},h.prototype.get=function(t){return t=i(t),this.has(t)?this.map[t]:null},h.prototype.has=function(t){return this.map.hasOwnProperty(i(t))},h.prototype.set=function(t,e){this.map[i(t)]=s(e)},h.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},h.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),a(t)},h.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),a(t)},h.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),a(t)},r.iterable&&(h.prototype[Symbol.iterator]=h.prototype.entries);var p=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function l(t,e){if(!(this instanceof l))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var r,o,n=(e=e||{}).body;if(t instanceof l){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new h(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new h(e.headers)),this.method=(r=e.method||this.method||"GET",o=r.toUpperCase(),p.indexOf(o)>-1?o:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(n),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var i=/([?&])_=[^&]*/;if(i.test(this.url))this.url=this.url.replace(i,"$1_="+(new Date).getTime());else{this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function b(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),o=r.shift().replace(/\+/g," "),n=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(o),decodeURIComponent(n))}}),e}function m(t,e){if(!(this instanceof m))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"",this.headers=new h(e.headers),this.url=e.url||"",this._initBody(t)}l.prototype.clone=function(){return new l(this,{body:this._bodyInit})},y.call(l.prototype),y.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new h(this.headers),url:this.url})},m.error=function(){var t=new m(null,{status:0,statusText:""});return t.type="error",t};var w=[301,302,303,307,308];m.redirect=function(t,e){if(-1===w.indexOf(e))throw new RangeError("Invalid status code");return new m(null,{status:e,headers:{location:t}})},t.DOMException=e.DOMException;try{new t.DOMException}catch(e){t.DOMException=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack},t.DOMException.prototype=Object.create(Error.prototype),t.DOMException.prototype.constructor=t.DOMException}function v(o,n){return new Promise(function(i,a){var f=new l(o,n);if(f.signal&&f.signal.aborted)return a(new t.DOMException("Aborted","AbortError"));var u=new XMLHttpRequest;function c(){u.abort()}u.onload=function(){var t,e,r={status:u.status,statusText:u.statusText,headers:(t=u.getAllResponseHeaders()||"",e=new h,t.replace(/\r?\n[\t ]+/g," ").split("\r").map(function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t}).forEach(function(t){var r=t.split(":"),o=r.shift().trim();if(o){var n=r.join(":").trim();e.append(o,n)}}),e)};r.url="responseURL"in u?u.responseURL:r.headers.get("X-Request-URL");var o="response"in u?u.response:u.responseText;setTimeout(function(){i(new m(o,r))},0)},u.onerror=function(){setTimeout(function(){a(new TypeError("Network request failed"))},0)},u.ontimeout=function(){setTimeout(function(){a(new TypeError("Network request failed"))},0)},u.onabort=function(){setTimeout(function(){a(new t.DOMException("Aborted","AbortError"))},0)},u.open(f.method,function(t){try{return""===t&&e.location.href?e.location.href:t}catch(e){return t}}(f.url),!0),"include"===f.credentials?u.withCredentials=!0:"omit"===f.credentials&&(u.withCredentials=!1),"responseType"in u&&(r.blob?u.responseType="blob":r.arrayBuffer&&f.headers.get("Content-Type")&&-1!==f.headers.get("Content-Type").indexOf("application/octet-stream")&&(u.responseType="arraybuffer")),!n||"object"!=typeof n.headers||n.headers instanceof h?f.headers.forEach(function(t,e){u.setRequestHeader(e,t)}):Object.getOwnPropertyNames(n.headers).forEach(function(t){u.setRequestHeader(t,s(n.headers[t]))}),f.signal&&(f.signal.addEventListener("abort",c),u.onreadystatechange=function(){4===u.readyState&&f.signal.removeEventListener("abort",c)}),u.send(void 0===f._bodyInit?null:f._bodyInit)})}v.polyfill=!0,e.fetch||(e.fetch=v,e.Headers=h,e.Request=l,e.Response=m),t.Headers=h,t.Request=l,t.Response=m,t.fetch=v,Object.defineProperty(t,"__esModule",{value:!0})});

},{}]},{},[23])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
